# nt2mdl 1.043 beta Nick Holford n.holford@auckland.ac.nz
simeoni_dat = dataobj{
### Data object
# The data object specifies a table of columns of data variables and the variable names which will be also used by the model object
   DATA_INPUT_VARIABLES{
      ID=list(type=categorical)
      TIME=list(type=continuous,units="h")
      DV=list(type=continuous)
      AMT=list(type=continuous,units="mg")
      CMT=list(type=categorical)
   }# end DATA_INPUT_VARIABLES

   SOURCE{
      myData=list(
           file="simeoni2004_data.csv",
           inputformat=nonmemFormat)
   }# end SOURCE
} # end data object

simeoni_par = parobj{
### Parameter object
# The parameter object defines the numerical values of the parameters with optional constraints (lo and high values) and units.

   STRUCTURAL{
# The STRUCTURAL block define the structural model parameters.
      #THETA
      POP_K10=list(value=0.868 ,fix=true)
      POP_K12=list(value=0.006 ,fix=true)
      POP_K21=list(value=0.0838 ,fix=true)
      POP_V1=list(value=1 ,fix=true)
      POP_LAMBDA0=list(value=1)
      POP_LAMBDA1=list(value=1)
      POP_K1=list(value=1)
      POP_K2=list(value=1)
      POP_W0=list(value=1)
      POP_CV=list(value=1)
      POP_PSI=list(value=20 ,fix=true)
   }# end STRUCTURAL

   VARIABILITY{
# The VARIABILITY block has a more complex structure because it needs to express a lower triangular matrix of parameters and how they are related to each other.
# VARIABILITY parameters may be expressed with a type of "SD" which implies standard deviations on the diagonal and correlations
# on the lower off diagonal elements or "VAR" which implies variances and covariances.
      #OMEGA
      #SIGMA
      RUV_SIGMA_RES=list(value=1 ,type=VAR,fix=true)

   }# end VARIABILITY

} # end of parameter object

simeoni_mdl = mdlobj{
### Model object
# The model object receives a list of input data variables from the data object and parameters (constants)from the parameter object.
# The parameter and variable names in the model object must be matched by a similar name in the parameter and data objects.
# Note that variables in the data object and parameters may be defined in the parameter object that are not referenced in the model object.
# Model variables are derived from the input data variables and parameters using algebraic expressions.

   MODEL_INPUT_VARIABLES{
# A name for each input data variable is required. Special uses of input data variables are indicated by the use attribute if the data variable name is not a standard name. Standard names may include ID, IDV, AMT, DV, MDV, etc. similar to standard data items recognized by NM-TRAN or Monolix. The type option is not required but may be useful as metadata. This kind of metadata (with an option to recode) could alternatively be specified in the data object.
      ID=list(use=id,level=2)
      TIME=list(use=idv,units="h")
      DV=list(type=continuous,use=dv,level=1)
      AMT=list(use=amt,units="mg")
      CMT=list(use=cmt)
   }# end MODEL_INPUT_VARIABLES

# The STRUCTURAL_PARAMETERS Block defines the structural model parameters.
   STRUCTURAL_PARAMETERS{
# A name for each parameter is required. Other attributes such as units are optional.
# Units may be used to achieve consistency between the parameter, data and model object values.
# This could be implemented during the WP2 translation process.

      #THETA
      POP_K10
      POP_K12
      POP_K21
      POP_V1
      POP_LAMBDA0
      POP_LAMBDA1
      POP_K1
      POP_K2
      POP_W0
      POP_CV
      POP_PSI
   }# end STRUCTURAL_PARAMETERS

   VARIABILITY_PARAMETERS{
# The VARIABILITY_PARAMETERS Block defines the variability parameters.
      #OMEGA
      #SIGMA
      RUV_SIGMA_RES
   }# end VARIABILITY_PARAMETERS
   
   RANDOM_VARIABLE_DEFINITION{
   eps_RUV_SIGMA_RES~(type=normal,mean=0,var=RUV_SIGMA_RES,level=DV)
   }

   MODEL_PREDICTION{
# The MODEL_PREDICTION block calculates model predictions based on model variables defined in the previous model object blocks.
# Code in this block expresses the structural model after group and individual parameter differences have been included.
# It can be considered as an expression of a deterministic prediction. It is the essential component of a shared sub-model.
# This block should not contain any covariate computations expressing predictable or unpredictable (random) between subject differences.


      ## COMPARTMENTS
      ## 
      ## COMP =  Q1
      ## COMP =  Q2
      ## COMP =  X1
      ## COMP =  X2
      ## COMP =  X3
      ## COMP =  X4

   ODE{
   C = Q1/POP_V1
   W = X1+X2+X3+X4
      Q1=ode(deriv= POP_K21*Q2-(POP_K10+POP_K12)*Q1,init= 0)
      Q2=ode(deriv= POP_K12*Q1-POP_K21*Q2,init= 0)
      X1=ode(deriv= (POP_LAMBDA0*X1/((1+(W*POP_LAMBDA0/POP_LAMBDA1)^ POP_PSI)^ (1/POP_PSI)))-POP_K2*C*X1,init=POP_W0)
      X2=ode(deriv= POP_K2*C*X1-POP_K1*X2,init= 0)
      X3=ode(deriv= POP_K1*X2-POP_K1*X3,init= 0)
      X4=ode(deriv= POP_K1*X3-POP_K1*X4,init= 0)
   }# end ODE

   LIBRARY{
      ##  ADVAN=6 TOL=6
      amount=nmadvan(model=6,output=list(A,F))
   }# end LIBRARY
   
   #initial conditions
   
   WTOT = X1+X2+X3+X4
   IRES = DV-WTOT
   IWRES = IRES/POP_CV
   #Y = WTOT+WTOT*THETA(10)*EPS(1)
   }# end MODEL_PREDICTION

   OBSERVATION{
      Y =  WTOT+WTOT*POP_CV*eps_RUV_SIGMA_RES
   }# end OBSERVATION

} # end of model object

simeoni_task = taskobj{
### Task Properties object
# Modelling tasks often have many options which the user may specify.
# The task properties object provides a way to collect together options for commonly performed tasks.
# The task properties object may define functions which behave like a function in R. It is called with a set of arguments and returns a result object.
# Following the R language convention the last evaluated statement in a function is used as the default result object returned by the function.

# A task function is defined with the Model Coding Language

# TARGET specific code

TARGET_CODE(target=NMTRAN_CODE,location="$PROBLEM",first=true){***
$PROB SIMEONI
***} # end TARGET_CODE

# End TARGET specific code

   MODEL{
      tolrel=6
   }# end MODEL

   myEST=function(t,m,p,d) { 
      EXECUTE{
         command="call nmgo simeoni"
      }# end EXECUTE

      # estimate (more options will typically be needed)
      ESTIMATE {
         target=t
         model=m
         parameter=p
         data=d


TARGET_CODE(target=NMTRAN_CODE,location="$ESTIMATION"){***
$EST METHOD=COND INTER MAX=9999 NSIG=3 SIGL=9
***} # end TARGET_CODE
            algo=list("FOCE  INTER")
      }# end ESTIMATE
   }# end of myEST

}# end of task object

simeoni_tel = telobj{
## The TEL is used to specify the sequence of execution of tasks.
# Result objects are returned by each task statement which may be used by subsequent tasks.


# Fit model using NMTRAN_CODE

simeoni_fit=simeoni_task$myEST(t=NMTRAN_CODE, m=simeoni_mdl, p=simeoni_par, d=simeoni_dat)

# Update parameter estimates with final estimates
simeoni_par=update(simeoni_fit,simeoni_par)

} # end of task execution language code
