# nt2mdl 1.046 beta Nick Holford n.holford@auckland.ac.nz
Winter_dat = dataobj{
### Data object
# The data object specifies a table of columns of data variables and the variable names which will be also used by the model object
   DATA_INPUT_VARIABLES{
      ID=list(type=categorical)
      TIME=list(type=continuous,units="week")
      DV=list(type=continuous)
      STEP=list(type=continuous)
      TREAT=list(type=continuous)
      ORIG=list(type=continuous)
      EVID=list(type=categorical)
   }# end DATA_INPUT_VARIABLES

   SOURCE{
      myData=list(
           file="winter.csv",
           inputformat=nonmemFormat,
           ignore="#")
   }# end SOURCE
} # end data object

Winter_par = parobj{
### Parameter object
# The parameter object defines the numerical values of the parameters with optional constraints (lo and high values) and units.

   STRUCTURAL{
# The STRUCTURAL block define the structural model parameters.
      #THETA
      POP_K_IN_FSI=list(value=1 ,fix=true)
      POP_K_OUT_FPG=list(value=0.021)
      POP_K_OUT_HB=list(value=0.0272)
      POP_FRHB0=list(value=0.82)
      POP_B0=list(value=0.635)
      POP_RB_G=list(value=0.178)
      POP_S0=list(value=1.38)
      POP_RS_G=list(value=0.245)
      POP_EF_B_G=list(value=1.115)
      POP_EF_S_M=list(value=0.699)
      POP_EF_S_P=list(value=0.649)
      POP_BETA_RB_P=list(value=-2.24)
      POP_BETA_RB_M=list(value=-2.82)
      POP_BETA_RS_P=list(value=0.567)
      POP_BETA_RS_M=list(value=1.01)
      POP_RES_FSI=list(value=0.2985)
      POP_RES_FSI30=list(value=0.6124)
      POP_RES_FPG=list(value=0.1277)
      POP_RES_HB=list(value=0.0438)
   }# end STRUCTURAL

   VARIABILITY{
# The VARIABILITY block has a more complex structure because it needs to express a lower triangular matrix of parameters and how they are related to each other.
# VARIABILITY parameters may be expressed with a type of "SD" which implies standard deviations on the diagonal and correlations
# on the lower off diagonal elements or "VAR" which implies variances and covariances.
      #OMEGA
      PPV_EFF=list(value=0.13 ,type=VAR)
      PPV_RB=list(value=0.0125 ,type=VAR)
      PPV_RS=list(value=0.00805 ,type=VAR)
      matrix(name="struc2",type=VAR) {
         PPV_B0=0.967,
         -0.48, PPV_S0=0.519,
         -0.053, -0.0185, PPV_FRHB0=0.0158
      } # end matrix struc2
      #SIGMA
      RUV_EPS_FSI=list(value=1 ,type=VAR,fix=true)
      RUV_EPS_FPG=list(value=1 ,type=VAR,fix=true)
      RUV_EPS_HB=list(value=1 ,type=VAR,fix=true)

   }# end VARIABILITY

} # end of parameter object

Winter_mdl = mdlobj{
### Model object
# The model object receives a list of input data variables from the data object and parameters (constants)from the parameter object.
# The parameter and variable names in the model object must be matched by a similar name in the parameter and data objects.
# Note that variables in the data object and parameters may be defined in the parameter object that are not referenced in the model object.
# Model variables are derived from the input data variables and parameters using algebraic expressions.

   MODEL_INPUT_VARIABLES{
# A name for each input data variable is required. Special uses of input data variables are indicated by the use attribute if the data variable name is not a standard name. Standard names may include ID, IDV, AMT, DV, MDV, etc. similar to standard data items recognized by NM-TRAN or Monolix. The type option is not required but may be useful as metadata. This kind of metadata (with an option to recode) could alternatively be specified in the data object.
      ID=list(use=id,level=2)
      TIME=list(use=idv,units="week")
      DV=list(type=continuous,use=dv,level=1)
      STEP=list(type=continuous,use=covariate)
      TREAT=list(type=continuous,use=covariate)
      ORIG=list(type=continuous,use=covariate)
      EVID=list(use=evid)
   }# end MODEL_INPUT_VARIABLES

# The STRUCTURAL_PARAMETERS Block defines the structural model parameters.
   STRUCTURAL_PARAMETERS{
# A name for each parameter is required. Other attributes such as units are optional.
# Units may be used to achieve consistency between the parameter, data and model object values.
# This could be implemented during the WP2 translation process.

      #THETA
      POP_K_IN_FSI
      POP_K_OUT_FPG
      POP_K_OUT_HB
      POP_FRHB0
      POP_B0
      POP_RB_G
      POP_S0
      POP_RS_G
      POP_EF_B_G
      POP_EF_S_M
      POP_EF_S_P
      POP_BETA_RB_P
      POP_BETA_RB_M
      POP_BETA_RS_P
      POP_BETA_RS_M
      POP_RES_FSI
      POP_RES_FSI30
      POP_RES_FPG
      POP_RES_HB
   }# end STRUCTURAL_PARAMETERS

   VARIABILITY_PARAMETERS{
# The VARIABILITY_PARAMETERS Block defines the variability parameters.
      #OMEGA
      PPV_EFF
      PPV_RB
      PPV_RS
      PPV_B0
      PPV_S0
      PPV_FRHB0
      #SIGMA
      RUV_EPS_FSI
      RUV_EPS_FPG
      RUV_EPS_HB
   }# end VARIABILITY_PARAMETERS

   GROUP_VARIABLES{
# The GROUP_VARIABLES block is used to express covariate models i.e. the fixed effect differences in parameters predictable from data variables.
# If there are no covariate effects to model then this block is not required.
# NONMEM may be able to take advantage of knowing that variables defined in this block represent the central tendency
# of the distribution of random effects defined in the INDIVIDUAL_VARIABLES block (known as MU referencing).
# In this example the prefix "grp_" for a variable name could be a hint that this is a MU variable for NM-TRAN.
# Other model variables may be defined in this block according to user preference.

   
   if (TREAT==0) {
      POP_RB = POP_RB_G*(1+POP_BETA_RB_M)
      POP_RS = POP_RS_G*(1+POP_BETA_RS_M)
   }
   if (TREAT==1) {
      POP_RB = POP_RB_G*(1+POP_BETA_RB_P)
      POP_RS = POP_RS_G*(1+POP_BETA_RS_P)
   }
   if (TREAT==2) {
      POP_RB = POP_RB_G
      POP_RS = POP_RS_G
   }
   }# end GROUP_VARIABLES


   RANDOM_VARIABLE_DEFINITION{
# The RANDOM_VARIABLE_DEFINITION block is used to define the distribution of random variables.
      eta_PPV_EFF ~ (type=normal, mean=0, var=PPV_EFF,level=ID)
      eta_PPV_RB ~ (type=normal, mean=0, var=PPV_RB,level=ID)
      eta_PPV_RS ~ (type=normal, mean=0, var=PPV_RS,level=ID)
      eta_PPV_B0 ~ (type=normal, mean=0, var=PPV_B0,level=ID)
      eta_PPV_S0 ~ (type=normal, mean=0, var=PPV_S0,level=ID)
      eta_PPV_FRHB0 ~ (type=normal, mean=0, var=PPV_FRHB0,level=ID)
      eps_RUV_EPS_FSI ~ (type=normal, mean=0, var=RUV_EPS_FSI,level=DV)
      eps_RUV_EPS_FPG ~ (type=normal, mean=0, var=RUV_EPS_FPG,level=DV)
      eps_RUV_EPS_HB ~ (type=normal, mean=0, var=RUV_EPS_HB,level=DV)
   }# end RANDOM_VARIABLE_DEFINITION

   INDIVIDUAL_VARIABLES{
# The INDIVIDUAL_VARIABLES block is used to express the individual variables and their distribution.
# If this is not a population model then this block is not required.

   SHIFT_EF_B_G = POP_EF_B_G*exp(eta_PPV_EFF) 
   SHIFT_EF_S_M = POP_EF_S_M*exp(eta_PPV_EFF) 
   SHIFT_EF_S_P = POP_EF_S_P*exp(eta_PPV_EFF) 
   FRHB0 = POP_FRHB0*exp(eta_PPV_FRHB0) 
   B0 = POP_B0*exp(eta_PPV_B0) 
   S0 = POP_S0*exp(eta_PPV_S0) 
   RB = POP_RB+eta_PPV_RB 
   RS = POP_RS+eta_PPV_RS
   BB0 = 1/(1+exp(B0))
   SS0 = 1/(1+exp(S0))
   FSI0 = (-5*3.5*BB0+sqrt((5*3.5*BB0)^ 2+4*5*22.5*BB0/SS0))/2
   FPG0 = 22.5/(S0*FSI0)
   HB0 = FRHB0*FPG0
   K_OUT_FSI = 5*POP_K_IN_FSI
   K_IN_FPG = 22.5*POP_K_OUT_FPG
   K_IN_HB = POP_K_OUT_HB*FRHB0
   #initial conditions

   }# end INDIVIDUAL_VARIABLES

   MODEL_PREDICTION{
# The MODEL_PREDICTION block calculates model predictions based on model variables defined in the previous model object blocks.
# Code in this block expresses the structural model after group and individual parameter differences have been included.
# It can be considered as an expression of a deterministic prediction. It is the essential component of a shared sub-model.
# This block should not contain any covariate computations expressing predictable or unpredictable (random) between subject differences.


      ## COMPARTMENTS
      ## 
      ## COMP =  FSI
      ## COMP =  FPG
      ## COMP =  HB

   ODE{
   BB = 1/(1+exp(B0+RB*TIME))
   SS = 1/(1+exp(B0+RS*TIME))
   EF_B = 1+STEP*SHIFT_EF_B_G
   EF_S = 1+STEP*SHIFT_EF_S_M+STEP*SHIFT_EF_S_P
      FSI=ode(deriv= (EF_B*BB)*(FPG-3.5)*POP_K_IN_FSI-FSI*K_OUT_FSI,init= FSI0)
      FPG=ode(deriv= (K_IN_FPG/(EF_S*SS*FSI))-(FPG*POP_K_OUT_FPG),init= FPG0)
      HB=ode(deriv= FPG*K_IN_HB-HB*POP_K_OUT_HB,init= HB0)
   }# end ODE

   LIBRARY{
      ## 
      ## ADVAN6 TOL=9  
      amount=nmadvan(model=6,output=list(A,F))
   }# end LIBRARY
   
   FPGLU = FSI
   FSINS = FPG
   HBA1C = HB
   if (ORIG==1) {
      IPRED = ln(FSINS)
      EPS_1 = eps_RUV_EPS_FSI
   }
   if (ORIG==1 && DV<=30) {
      W = POP_RES_FSI
   }
   if (ORIG==1 && DV>30) {
      W = sqrt(POP_RES_FSI^ 2+POP_RES_FSI30^ 2)
   }
   if (ORIG==2) {
      IPRED = ln(FPGLU)
      W = POP_RES_FPG
      EPS_1 = eps_RUV_EPS_FPG
   }
   if (ORIG==3) {
      IPRED = ln(HBA1C)
      W = POP_RES_HB
      EPS_1 = eps_RUV_EPS_HB
   }
   IRES = DV-IPRED
   IWRES = IRES/W
   }# end MODEL_PREDICTION

   OBSERVATION{
      Y =  IPRED+EPS_1*W
   }# end OBSERVATION


   MODEL_OUTPUT_VARIABLES{
# The OUTPUT block specifies the model variables that may be exported from the model object.
      ID
      TIME
      STEP
      TREAT
      ORIG
      EVID
      Y
   }# end MODEL_OUTPUT_VARIABLES

} # end of model object

Winter_task = taskobj{
### Task Properties object
# Modelling tasks often have many options which the user may specify.
# The task properties object provides a way to collect together options for commonly performed tasks.
# The task properties object may define functions which behave like a function in R. It is called with a set of arguments and returns a result object.
# Following the R language convention the last evaluated statement in a function is used as the default result object returned by the function.

# A task function is defined with the Model Coding Language

# TARGET specific code

TARGET_CODE(target=NMTRAN_CODE,location="$PROBLEM",first=true){***
$PROB WINTER
; De Winter 2006
; FPG-FSI-Hb1Ac
; encoded by UNIPV team 2014 email: paolo.magni@unipv.it
***} # end TARGET_CODE

# End TARGET specific code

   MODEL{
      tolrel=9
   }# end MODEL

   ## TABLE
   #NOPRINT ONEHEADER FILE=winter.fit 

   myEST=function(t,m,p,d) { 
      EXECUTE{
         command="call nmgo Winter"
      }# end EXECUTE

      # estimate (more options will typically be needed)
      ESTIMATE {
         target=t
         model=m
         parameter=p
         data=d


TARGET_CODE(target=NMTRAN_CODE,location="$ESTIMATION"){***
$EST METHOD=COND INTER
MAX=0 NSIG=3 SIGL=9
NOABORT PRINT=1
***} # end TARGET_CODE
            algo=list("FOCE  INTER")
      }# end ESTIMATE
   }# end of myEST

}# end of task object

Winter_tel = telobj{
## The TEL is used to specify the sequence of execution of tasks.
# Result objects are returned by each task statement which may be used by subsequent tasks.


# Fit model using NMTRAN_CODE

Winter_fit=Winter_task$myEST(t=NMTRAN_CODE, m=Winter_mdl, p=Winter_par, d=Winter_dat)

# Update parameter estimates with final estimates
Winter_par=update(Winter_fit,Winter_par)

} # end of task execution language code
