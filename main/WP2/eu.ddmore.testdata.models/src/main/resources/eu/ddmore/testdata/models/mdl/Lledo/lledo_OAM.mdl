# nt2mdl 1.046 beta Nick Holford n.holford@auckland.ac.nz
lledo_dat = dataobj{
### Data object
# The data object specifies a table of columns of data variables and the variable names which will be also used by the model object
   DATA_INPUT_VARIABLES{
      ID=list(type=categorical)
      TIME=list(type=continuous,units="day")
      DV=list(type=continuous)
      MPG=list(type=continuous,units="mg/dL")
      EVID=list(type=categorical)
      TRT=list(type=continuous)
   }# end DATA_INPUT_VARIABLES

   SOURCE{
      myData=list(
           file="Dynamic_MPG.csv",
           inputformat=nonmemFormat,
           ignore="@")
   }# end SOURCE
} # end data object

lledo_par = parobj{
### Parameter object
# The parameter object defines the numerical values of the parameters with optional constraints (lo and high values) and units.

   STRUCTURAL{
# The STRUCTURAL block define the structural model parameters.
      #THETA
      POP_KIN=list(value=1 ,fix=true)
      POP_POW=list(value=0.381)
      POP_LS=list(value=91.7,units="day")
      POP_SD_IIV_LS=list(value=0.0822)
      POP_KG=list(value=0.00837,units="dL/mg/day")
      POP_LSP=list(value=8.2,units="day")
      POP_SD_IIV_LSP=list(value=0.115)
      POP_CV_HBA1C=list(value=0.0227)
   }# end STRUCTURAL

   VARIABILITY{
# The VARIABILITY block has a more complex structure because it needs to express a lower triangular matrix of parameters and how they are related to each other.
# VARIABILITY parameters may be expressed with a type of "SD" which implies standard deviations on the diagonal and correlations
# on the lower off diagonal elements or "VAR" which implies variances and covariances.
      #OMEGA
      PPV_OMEGA_LS=list(value=1 ,type=VAR,fix=true)
      PPV_OMEGA_LSP=list(value=1 ,type=VAR,fix=true)
      #SIGMA
      RUV_SIGMA_RES=list(value=1 ,type=VAR,fix=true)

   }# end VARIABILITY

} # end of parameter object

lledo_mdl = mdlobj{
### Model object
# The model object receives a list of input data variables from the data object and parameters (constants)from the parameter object.
# The parameter and variable names in the model object must be matched by a similar name in the parameter and data objects.
# Note that variables in the data object and parameters may be defined in the parameter object that are not referenced in the model object.
# Model variables are derived from the input data variables and parameters using algebraic expressions.

   MODEL_INPUT_VARIABLES{
# A name for each input data variable is required. Special uses of input data variables are indicated by the use attribute if the data variable name is not a standard name. Standard names may include ID, IDV, AMT, DV, MDV, etc. similar to standard data items recognized by NM-TRAN or Monolix. The type option is not required but may be useful as metadata. This kind of metadata (with an option to recode) could alternatively be specified in the data object.
      ID=list(use=id,level=2)
      TIME=list(use=idv,units="day")
      DV=list(type=continuous,use=dv,level=1)
      MPG=list(type=continuous,use=covariate,units="mg/dL")
      EVID=list(use=evid)
      TRT=list(type=continuous,use=covariate)
   }# end MODEL_INPUT_VARIABLES

# The STRUCTURAL_PARAMETERS Block defines the structural model parameters.
   STRUCTURAL_PARAMETERS{
# A name for each parameter is required. Other attributes such as units are optional.
# Units may be used to achieve consistency between the parameter, data and model object values.
# This could be implemented during the WP2 translation process.

      #THETA
      POP_KIN
      POP_POW
      POP_LS=list(units="day")
      POP_SD_IIV_LS
      POP_KG=list(units="dL/mg/day")
      POP_LSP=list(units="day")
      POP_SD_IIV_LSP
      POP_CV_HBA1C
   }# end STRUCTURAL_PARAMETERS

   VARIABILITY_PARAMETERS{
# The VARIABILITY_PARAMETERS Block defines the variability parameters.
      #OMEGA
      PPV_OMEGA_LS
      PPV_OMEGA_LSP
      #SIGMA
      RUV_SIGMA_RES
   }# end VARIABILITY_PARAMETERS

   GROUP_VARIABLES{
# The GROUP_VARIABLES block is used to express covariate models i.e. the fixed effect differences in parameters predictable from data variables.
# If there are no covariate effects to model then this block is not required.
# NONMEM may be able to take advantage of knowing that variables defined in this block represent the central tendency
# of the distribution of random effects defined in the INDIVIDUAL_VARIABLES block (known as MU referencing).
# In this example the prefix "grp_" for a variable name could be a hint that this is a MU variable for NM-TRAN.
# Other model variables may be defined in this block according to user preference.

   
   KIN = POP_KIN 
   POW = POP_POW 
   MPG_LS = (149/MPG+1E-6)^ POW 
   TVLS = POP_LS 
   }# end GROUP_VARIABLES


   RANDOM_VARIABLE_DEFINITION{
# The RANDOM_VARIABLE_DEFINITION block is used to define the distribution of random variables.
      eta_PPV_OMEGA_LS ~ (type=normal, mean=0, var=PPV_OMEGA_LS,level=ID)
      eta_PPV_OMEGA_LSP ~ (type=normal, mean=0, var=PPV_OMEGA_LSP,level=ID)
      eps_RUV_SIGMA_RES ~ (type=normal, mean=0, var=RUV_SIGMA_RES,level=DV)
   }# end RANDOM_VARIABLE_DEFINITION

   INDIVIDUAL_VARIABLES{
# The INDIVIDUAL_VARIABLES block is used to express the individual variables and their distribution.
# If this is not a population model then this block is not required.

   IIVLS = POP_SD_IIV_LS*eta_PPV_OMEGA_LS 
   LS = TVLS*MPG_LS*exp(IIVLS) 
   NC = 12 
   KLS = NC/LS 
   KG = POP_KG/1000 
   GLY = KG*MPG 
   KGP = KG 
   TVLSP = POP_LSP 
   IIVLSP = POP_SD_IIV_LSP*eta_PPV_OMEGA_LSP 
   LSP = TVLSP*exp(IIVLSP) 
   PRE = exp(-KGP*MPG*LSP) 
   A1_0 = MPG 
   A2_0 = PRE*KIN/(KLS+GLY) 
   A3_0 = A2_0*KLS/(KLS+GLY) 
   A4_0 = A3_0*KLS/(KLS+GLY) 
   A5_0 = A4_0*KLS/(KLS+GLY) 
   A6_0 = A5_0*KLS/(KLS+GLY) 
   A7_0 = A6_0*KLS/(KLS+GLY) 
   A8_0 = A7_0*KLS/(KLS+GLY) 
   A9_0 = A8_0*KLS/(KLS+GLY) 
   A10_0 = A9_0*KLS/(KLS+GLY) 
   A11_0 = A10_0*KLS/(KLS+GLY) 
   A12_0 = A11_0*KLS/(KLS+GLY) 
   A13_0 = A12_0*KLS/(KLS+GLY) 
   A14_0 = (A2_0*GLY+KIN*(1-PRE))/KLS 
   A15_0 = (A14_0*KLS+A3_0*GLY)/KLS 
   A16_0 = (A15_0*KLS+A4_0*GLY)/KLS 
   A17_0 = (A16_0*KLS+A5_0*GLY)/KLS 
   A18_0 = (A17_0*KLS+A6_0*GLY)/KLS 
   A19_0 = (A18_0*KLS+A7_0*GLY)/KLS 
   A20_0 = (A19_0*KLS+A8_0*GLY)/KLS 
   A21_0 = (A20_0*KLS+A9_0*GLY)/KLS 
   A22_0 = (A21_0*KLS+A10_0*GLY)/KLS 
   A23_0 = (A22_0*KLS+A11_0*GLY)/KLS 
   A24_0 = (A23_0*KLS+A12_0*GLY)/KLS 
   A25_0 = (A24_0*KLS+A13_0*GLY)/KLS
   #initial conditions

   }# end INDIVIDUAL_VARIABLES

   MODEL_PREDICTION{
# The MODEL_PREDICTION block calculates model predictions based on model variables defined in the previous model object blocks.
# Code in this block expresses the structural model after group and individual parameter differences have been included.
# It can be considered as an expression of a deterministic prediction. It is the essential component of a shared sub-model.
# This block should not contain any covariate computations expressing predictable or unpredictable (random) between subject differences.


      ## COMPARTMENTS
      ## 
      ## COMP =  A1
      ## COMP =  A2
      ## COMP =  A3
      ## COMP =  A4
      ## COMP =  A5
      ## COMP =  A6
      ## COMP =  A7
      ## COMP =  A8
      ## COMP =  A9
      ## COMP =  A10
      ## COMP =  A11
      ## COMP =  A12
      ## COMP =  A13
      ## COMP =  A14
      ## COMP =  A15
      ## COMP =  A16
      ## COMP =  A17
      ## COMP =  A18
      ## COMP =  A19
      ## COMP =  A20
      ## COMP =  A21
      ## COMP =  A22
      ## COMP =  A23
      ## COMP =  A24
      ## COMP =  A25

   ODE{
      A1=ode(deriv= 0,init= A1_0)
      A2=ode(deriv= KIN*PRE-A2*(KLS+GLY),init= A2_0)
      A3=ode(deriv= (A2-A3)*KLS-A3*GLY,init= A3_0)
      A4=ode(deriv= (A3-A4)*KLS-A4*GLY,init= A4_0)
      A5=ode(deriv= (A4-A5)*KLS-A5*GLY,init= A5_0)
      A6=ode(deriv= (A5-A6)*KLS-A6*GLY,init= A6_0)
      A7=ode(deriv= (A6-A7)*KLS-A7*GLY,init= A7_0)
      A8=ode(deriv= (A7-A8)*KLS-A8*GLY,init= A8_0)
      A9=ode(deriv= (A8-A9)*KLS-A9*GLY,init= A9_0)
      A10=ode(deriv= (A9-A10)*KLS-A10*GLY,init= A10_0)
      A11=ode(deriv= (A10-A11)*KLS-A11*GLY,init= A11_0)
      A12=ode(deriv= (A11-A12)*KLS-A12*GLY,init= A12_0)
      A13=ode(deriv= (A12-A13)*KLS-A13*GLY,init= A13_0)
      A14=ode(deriv= KIN*(1-PRE)-A14*KLS+A2*GLY,init= A14_0)
      A15=ode(deriv= (A14-A15)*KLS+A3*GLY,init= A15_0)
      A16=ode(deriv= (A15-A16)*KLS+A4*GLY,init= A16_0)
      A17=ode(deriv= (A16-A17)*KLS+A5*GLY,init= A17_0)
      A18=ode(deriv= (A17-A18)*KLS+A6*GLY,init= A18_0)
      A19=ode(deriv= (A18-A19)*KLS+A7*GLY,init= A19_0)
      A20=ode(deriv= (A19-A20)*KLS+A8*GLY,init= A20_0)
      A21=ode(deriv= (A20-A21)*KLS+A9*GLY,init= A21_0)
      A22=ode(deriv= (A21-A22)*KLS+A10*GLY,init= A22_0)
      A23=ode(deriv= (A22-A23)*KLS+A11*GLY,init= A23_0)
      A24=ode(deriv= (A23-A24)*KLS+A12*GLY,init= A24_0)
      A25=ode(deriv= (A24-A25)*KLS+A13*GLY,init= A25_0)
   }# end ODE

   LIBRARY{
      ## 
      ## ADVAN13  TOL = 7
      amount=nmadvan(model=13,output=list(A,F))
   }# end LIBRARY
   
   NONRBC = A2+A3+A4+A5+A6+A7+A8+A9+A10+A11+A12+A13
   GLYRBC = A14+A15+A16+A17+A18+A19+A20+A21+A22+A23+A24+A25
   TOTRBC = NONRBC+GLYRBC
   HBA1C = GLYRBC/TOTRBC*100
   IPRED = HBA1C
   W = POP_CV_HBA1C*IPRED
   }# end MODEL_PREDICTION

   OBSERVATION{
      Y =  IPRED+W*eps_RUV_SIGMA_RES
   }# end OBSERVATION


   MODEL_OUTPUT_VARIABLES{
# The OUTPUT block specifies the model variables that may be exported from the model object.
      ID
      TIME
      MPG
      EVID
      Y
   }# end MODEL_OUTPUT_VARIABLES

} # end of model object

lledo_task = taskobj{
### Task Properties object
# Modelling tasks often have many options which the user may specify.
# The task properties object provides a way to collect together options for commonly performed tasks.
# The task properties object may define functions which behave like a function in R. It is called with a set of arguments and returns a result object.
# Following the R language convention the last evaluated statement in a function is used as the default result object returned by the function.

# A task function is defined with the Model Coding Language

# TARGET specific code

TARGET_CODE(target=NMTRAN_CODE,location="$PROBLEM",first=true){***
$PROB FINAL FPG-HBA1C WITH PK OF TESAGLITASAR
***} # end TARGET_CODE

TARGET_CODE(target=NMTRAN_CODE,location="$ABBREVIATED",before="$PK"){***
$ABB DERIV2=NO
***} # end TARGET_CODE

# End TARGET specific code

   MODEL{
      tolrel=7
   }# end MODEL

   ## TABLE
   #NOPRINT ONEHEADER FILE=lledo.fit 

   myEST=function(t,m,p,d) { 
      EXECUTE{
         command="call nmgo lledo"
      }# end EXECUTE

      # estimate (more options will typically be needed)
      ESTIMATE {
         target=t
         model=m
         parameter=p
         data=d


TARGET_CODE(target=NMTRAN_CODE,location="$ESTIMATION"){***
$ESTIMATION METHOD=COND INTER
MAXEVAL=0 PRINT=1 NOABORT
MSFO=LLEDO.MSF
$COV UNCOND
***} # end TARGET_CODE
            algo=list("FOCE  INTER")
            cov=true
      }# end ESTIMATE
   }# end of myEST

}# end of task object

lledo_tel = telobj{
## The TEL is used to specify the sequence of execution of tasks.
# Result objects are returned by each task statement which may be used by subsequent tasks.


# Fit model using NMTRAN_CODE

lledo_fit=lledo_task$myEST(t=NMTRAN_CODE, m=lledo_mdl, p=lledo_par, d=lledo_dat)

# Update parameter estimates with final estimates
lledo_par=update(lledo_fit,lledo_par)

} # end of task execution language code
