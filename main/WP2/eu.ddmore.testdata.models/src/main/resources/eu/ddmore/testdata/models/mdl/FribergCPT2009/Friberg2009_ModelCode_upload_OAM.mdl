# nt2mdl 1.047 beta Nick Holford n.holford@auckland.ac.nz
Friberg2009_ModelCode_upload_dat = dataobj{
### Data object
# The data object specifies a table of columns of data variables and the variable names which will be also used by the model object
   DATA_INPUT_VARIABLES{
      ID=list(type=categorical)
      TIME=list(type=continuous,units="day")
      DV=list(type=continuous)
      STUD=list(type=continuous)
      DDUR=list(type=continuous)
      HOSP=list(type=continuous)
      US=list(type=continuous)
      AUC=list(type=continuous,units="ug/h/L")
      MDV=list(type=categorical)
   }# end DATA_INPUT_VARIABLES

   SOURCE{
      myData=list(
           file="PANSS_Friberg2009_simdata_2.csv",
           inputformat=nonmemFormat,
           ignore="@")
   }# end SOURCE
} # end data object

Friberg2009_ModelCode_upload_par = parobj{
### Parameter object
# The parameter object defines the numerical values of the parameters with optional constraints (lo and high values) and units.

   STRUCTURAL{
# The STRUCTURAL block define the structural model parameters.
      #THETA
      POP_PAN0_BASELINE_PANSS_PHASE_II_STUDIES=list(value=94)
      POP_PAN0_BASELINE_PANSS_PHASE_III_STUDIES=list(value=90.5)
      POP_DIFFERENCE_PANSS_BASELINE_CHRONIC_PATIENTS=list(value=-0.0339)
      POP_PMAX_MAXIMUM_PLACEBO_EFFECT_PHASE_II=list(value=0.0859)
      POP_DIFFERENCE_MAXIMUM_PLACEBO_EFFECT_WITH_PHASE_III_STUDY=list(value=0.688) # (proportional)
      POP_TP_TIME_COURSE_PLACEBO_RESPONSE=list(value=13.2,lo=0,units="day")
      POP_POW_POWER_PARAMETER_WEIBULL_FUNCTION=list(value=1.24,lo=0)
      POP_AUC50_AUC=list(value=82,units="ug/h/L")
      POP_EMAX_MAXIMUM_ASENAPINE_EFFECT=list(value=0.191)
      POP_DIFFERENCE_IN_RESIDUAL_ERROR_HOSPITALIZED_PATIENTS=list(value=-0.145)
      POP_TYPICAL_RESIDUAL_ERROR=list(value=3.52)
      POP_DIFFERENCE_IN_RESIDUAL_ERROR_IN_US_BASED_STUDIES=list(value=0.623)
   }# end STRUCTURAL

   VARIABILITY{
# The VARIABILITY block has a more complex structure because it needs to express a lower triangular matrix of parameters and how they are related to each other.
# VARIABILITY parameters may be expressed with a type of "SD" which implies standard deviations on the diagonal and correlations
# on the lower off diagonal elements or "VAR" which implies variances and covariances.
      #OMEGA
      matrix(name="struc1",type=VAR) {
         PPV_PAN0=167,
         -0.395, PPV_PMAX=0.0249
      } # end matrix struc1
      PPV_AUC50=list(value= 21.7 ,type=VAR)
      PPV_RES_ERR=list(value=0.196     ,type=VAR)
      #SIGMA
      RUV_EPS=list(value= 1 ,type=VAR,fix=true)

   }# end VARIABILITY

} # end of parameter object

Friberg2009_ModelCode_upload_mdl = mdlobj{
### Model object
# The model object receives a list of input data variables from the data object and parameters (constants)from the parameter object.
# The parameter and variable names in the model object must be matched by a similar name in the parameter and data objects.
# Note that variables in the data object and parameters may be defined in the parameter object that are not referenced in the model object.
# Model variables are derived from the input data variables and parameters using algebraic expressions.

   MODEL_INPUT_VARIABLES{
# A name for each input data variable is required. Special uses of input data variables are indicated by the use attribute if the data variable name is not a standard name. Standard names may include ID, IDV, AMT, DV, MDV, etc. similar to standard data items recognized by NM-TRAN or Monolix. The type option is not required but may be useful as metadata. This kind of metadata (with an option to recode) could alternatively be specified in the data object.
      ID=list(use=id,level=2)
      TIME=list(use=idv,units="day")
      DV=list(type=continuous,use=dv,level=1)
      STUD=list(type=continuous,use=covariate)
      DDUR=list(type=continuous,use=covariate)
      HOSP=list(type=continuous,use=covariate)
      US=list(type=continuous,use=covariate)
      AUC=list(type=continuous,use=covariate,units="ug/h/L")
      MDV=list(use=mdv)
   }# end MODEL_INPUT_VARIABLES

# The STRUCTURAL_PARAMETERS Block defines the structural model parameters.
   STRUCTURAL_PARAMETERS{
# A name for each parameter is required. Other attributes such as units are optional.
# Units may be used to achieve consistency between the parameter, data and model object values.
# This could be implemented during the WP2 translation process.

      #THETA
      POP_PAN0_BASELINE_PANSS_PHASE_II_STUDIES
      POP_PAN0_BASELINE_PANSS_PHASE_III_STUDIES
      POP_DIFFERENCE_PANSS_BASELINE_CHRONIC_PATIENTS
      POP_PMAX_MAXIMUM_PLACEBO_EFFECT_PHASE_II
      POP_DIFFERENCE_MAXIMUM_PLACEBO_EFFECT_WITH_PHASE_III_STUDY
      POP_TP_TIME_COURSE_PLACEBO_RESPONSE=list(units="day")
      POP_POW_POWER_PARAMETER_WEIBULL_FUNCTION
      POP_AUC50_AUC=list(units="ug/h/L")
      POP_EMAX_MAXIMUM_ASENAPINE_EFFECT
      POP_DIFFERENCE_IN_RESIDUAL_ERROR_HOSPITALIZED_PATIENTS
      POP_TYPICAL_RESIDUAL_ERROR
      POP_DIFFERENCE_IN_RESIDUAL_ERROR_IN_US_BASED_STUDIES
   }# end STRUCTURAL_PARAMETERS

   VARIABILITY_PARAMETERS{
# The VARIABILITY_PARAMETERS Block defines the variability parameters.
      #OMEGA
      PPV_PAN0
      PPV_PMAX
      PPV_AUC50
      PPV_RES_ERR
      #SIGMA
      RUV_EPS
   }# end VARIABILITY_PARAMETERS

   GROUP_VARIABLES{
# The GROUP_VARIABLES block is used to express covariate models i.e. the fixed effect differences in parameters predictable from data variables.
# If there are no covariate effects to model then this block is not required.
# NONMEM may be able to take advantage of knowing that variables defined in this block represent the central tendency
# of the distribution of random effects defined in the INDIVIDUAL_VARIABLES block (known as MU referencing).
# In this example the prefix "grp_" for a variable name could be a hint that this is a MU variable for NM-TRAN.
# Other model variables may be defined in this block according to user preference.

   
   DDU    = 0     # duration of current episode < 1 month
   if (DDUR>2) DDU  =  1 # duration > 1 month
   PHASE  = 0                      # phase II study 
   if (STUD>30) PHASE  =  1      # phase III study
   TVP0   = POP_PAN0_BASELINE_PANSS_PHASE_II_STUDIES*(1+POP_DIFFERENCE_PANSS_BASELINE_CHRONIC_PATIENTS*DDU)            # baseline PANSS
   if (PHASE==1) TVP0  =  POP_PAN0_BASELINE_PANSS_PHASE_III_STUDIES*(1+POP_DIFFERENCE_PANSS_BASELINE_CHRONIC_PATIENTS*DDU)
   }# end GROUP_VARIABLES


   RANDOM_VARIABLE_DEFINITION{
# The RANDOM_VARIABLE_DEFINITION block is used to define the distribution of random variables.
      eta_PPV_PAN0 ~ (type=normal, mean=0, var=PPV_PAN0,level=ID)
      eta_PPV_PMAX ~ (type=normal, mean=0, var=PPV_PMAX,level=ID)
      eta_PPV_AUC50 ~ (type=normal, mean=0, var=PPV_AUC50,level=ID)
      eta_PPV_RES_ERR ~ (type=normal, mean=0, var=PPV_RES_ERR,level=ID)
      eps_RUV_EPS ~ (type=normal, mean=0, var=RUV_EPS,level=DV)
   }# end RANDOM_VARIABLE_DEFINITION

   INDIVIDUAL_VARIABLES{
# The INDIVIDUAL_VARIABLES block is used to express the individual variables and their distribution.
# If this is not a population model then this block is not required.

   PAN0   = TVP0 + eta_PPV_PAN0
   TVPX   = (POP_PMAX_MAXIMUM_PLACEBO_EFFECT_PHASE_II * (1+POP_DIFFERENCE_MAXIMUM_PLACEBO_EFFECT_WITH_PHASE_III_STUDY*PHASE))        # maximum placebo response
   PMAX   = TVPX + eta_PPV_PMAX
   TP     = POP_TP_TIME_COURSE_PLACEBO_RESPONSE                               # time-course parameter for placebo response
   POW    = POP_POW_POWER_PARAMETER_WEIBULL_FUNCTION                               # power of weibull function
   PMOD   = PMAX*(1-exp(-(TIME/TP)^ POW))          # placebo model
   FT     = TIME/42                                # time-course parameter for asenapine response
   if (TIME>42) FT  = 1
   AUC50  = POP_AUC50_AUC*exp(eta_PPV_AUC50)                   # EC50 of asenapine AUC
   EMAX   = POP_EMAX_MAXIMUM_ASENAPINE_EFFECT                               # Emax of asenapine
   EFF    = EMAX*AUC/(AUC50+AUC) * FT              # asenapine effect
   EMOD   = 0
   if (TIME>0 && AUC>0) EMOD  =  EFF           # PANSS scores at times other than baseline
   PSCR  = PAN0*(1-PMOD)*(1-EMOD)                  
   IPRED  = PSCR
   CHOSP = 1 
   # influence of not being hospitalized on residual error:
   if (HOSP==0) CHOSP  =  ( 1 + POP_DIFFERENCE_IN_RESIDUAL_ERROR_HOSPITALIZED_PATIENTS)  
   TVW    = CHOSP*(POP_TYPICAL_RESIDUAL_ERROR*(1+POP_DIFFERENCE_IN_RESIDUAL_ERROR_IN_US_BASED_STUDIES*US))     # residual variability (variance) including the effect of the study being performed in the US
   W  = TVW*exp(eta_PPV_RES_ERR)
   IRES  = DV-IPRED
   IWRES = IRES/W

   }# end INDIVIDUAL_VARIABLES

   MODEL_PREDICTION{
# The MODEL_PREDICTION block calculates model predictions based on model variables defined in the previous model object blocks.
# Code in this block expresses the structural model after group and individual parameter differences have been included.
# It can be considered as an expression of a deterministic prediction. It is the essential component of a shared sub-model.
# This block should not contain any covariate computations expressing predictable or unpredictable (random) between subject differences.

   }# end MODEL_PREDICTION

   OBSERVATION{
      Y =  IPRED+W*eps_RUV_EPS
   }# end OBSERVATION


   MODEL_OUTPUT_VARIABLES{
# The OUTPUT block specifies the model variables that may be exported from the model object.
      ID
      TIME
      IPRED
      IWRES
      eta_PPV_PAN0
      eta_PPV_PMAX
      eta_PPV_AUC50
      eta_PPV_RES_ERR
      STUD
      DDUR
      US
   }# end MODEL_OUTPUT_VARIABLES

} # end of model object

Friberg2009_ModelCode_upload_task = taskobj{
### Task Properties object
# Modelling tasks often have many options which the user may specify.
# The task properties object provides a way to collect together options for commonly performed tasks.
# The task properties object may define functions which behave like a function in R. It is called with a set of arguments and returns a result object.
# Following the R language convention the last evaluated statement in a function is used as the default result object returned by the function.

# A task function is defined with the Model Coding Language

# TARGET specific code

TARGET_CODE(target=NMTRAN_CODE,location="$PROBLEM",first=true){***
$PROBLEM ASENAPINE IN ACUTE SCHIZOPHRENIA
***} # end TARGET_CODE

# End TARGET specific code

   ## TABLE
   #NOPRINT ONEHEADER FILE=sdtab1 NOPRINT ONEHEADER FILE=patab1 NOPRINT ONEHEADER FILE=catab1 

   myEST=function(t,m,p,d) { 
      EXECUTE{
         command="call nmgo Friberg2009_ModelCode_upload"
      }# end EXECUTE

      # estimate (more options will typically be needed)
      ESTIMATE {
         target=t
         model=m
         parameter=p
         data=d


TARGET_CODE(target=NMTRAN_CODE,location="$ESTIMATION"){***
$ESTIMATION MAX=9999 PRINT=5 METHOD=1 INT
$COVARIANCE PRINT=E
***} # end TARGET_CODE
            algo=list("FOCE ")
            cov=true
      }# end ESTIMATE
   }# end of myEST

}# end of task object

Friberg2009_ModelCode_upload_tel = telobj{
## The TEL is used to specify the sequence of execution of tasks.
# Result objects are returned by each task statement which may be used by subsequent tasks.


# Fit model using NMTRAN_CODE

Friberg2009_ModelCode_upload_fit=Friberg2009_ModelCode_upload_task$myEST(t=NMTRAN_CODE, m=Friberg2009_ModelCode_upload_mdl, p=Friberg2009_ModelCode_upload_par, d=Friberg2009_ModelCode_upload_dat)

# Update parameter estimates with final estimates
Friberg2009_ModelCode_upload_par=update(Friberg2009_ModelCode_upload_fit,Friberg2009_ModelCode_upload_par)

} # end of task execution language code
