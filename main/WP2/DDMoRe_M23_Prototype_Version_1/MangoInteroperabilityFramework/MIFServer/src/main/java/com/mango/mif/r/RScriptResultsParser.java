/* File			:  RScriptResultsParser.java
 * Project		:  MangoInteroperabilityFramework
 * Created on	:  2 Apr 2012
 */
package com.mango.mif.r;

import java.io.File;
import java.io.FilenameFilter;
import java.util.Map;

import org.apache.log4j.Logger;

import com.google.common.base.Preconditions;
import com.google.common.collect.Maps;

/**
 * 
 * Parses results generated by R script
 * 
 * @version $Revision: $ as of $Date: $
 * <p>SVN Entry : $HeadURL: $
 * <p>SVN ID    : $Id: $
 * <p>Last edited by : $Author: $
 */
public class RScriptResultsParser {
	
	private final static Logger LOG = Logger.getLogger(RScriptResultsParser.class);
    /**
     * working directory containing results
     */
    private File workingDirectory;
    /**
     * 
     */
	private FilenameFilter mifFileNameFilter = new FilenameFilter() {
		@Override
		public boolean accept(File dir, String name) {
			return !(name.startsWith("MIF-")||name.contains("-MIF"));
		}
	};
    /**
     * Creates new result parser
     */
    public RScriptResultsParser() {
        
    }

    public void setWorkingDirectory(File workingDirectory) {
        this.workingDirectory = workingDirectory;
    }
    
    /**
     * 
     * @return parsed results
     */
    public Map<String,File> getResultFiles() {
        Preconditions.checkNotNull(workingDirectory, "Working directory must be set.");
        Map<String,File> result = Maps.newHashMap();

        result.putAll(listFiles(workingDirectory));
        
        return result;
    }
    
    /**
     * recursively trespasses through the directory and returns all the files.
     * 
     * @param directory
     * @return
     */
    private Map<String, File> listFiles(File directory) {
    	Map<String, File> result = Maps.newHashMap();
    	for(File file : directory.listFiles(mifFileNameFilter)) {
    		if(file.isDirectory()) {
    			result.putAll(listFiles(file));
    		} else {
    			String key = file.getAbsolutePath().replace(workingDirectory.getAbsolutePath()+File.separator, "").replace(File.separatorChar, '/');
    			result.put(key, file);
    			LOG.info("Result file: " + file);
    		}
        }
    	return result;
    }
}
