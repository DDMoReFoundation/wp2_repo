#
# "Fully Populated" test MDL file.
#
# This file is a mish-mash of many of the Use Cases, incorporating
# as many different ways of expressing variables, expressions etc.
# within a model as possible. The resulting model is garbage but
# has been constructed so that it is at least parseable by the MDL
# parsing code, and is used for exercising as much of the MDL<->JSON
# functionality as is possible with a single model.
#

fully_populated_dat = dataObj {
	DECLARED_VARIABLES{
      GUT; Y; Y2 withCategories {c0, c1, c2, c3}; DOSE; CP_obs; PCA_obs
    }

	DATA_INPUT_VARIABLES {
		ID : { use is id }
		TIME : { use is idv }
		WT : { use is covariate }
		SEX: {use is catCov withCategories {female when 0, male when 1 } }
        AGE : { use is age }
        AMT : { use is amt }
		DVID : { use is dvid, variable = Y2}
		DV : { use is dv, define= {Y2.c0 when 0, Y2.c1 when 1, Y2.c2 when 2, Y2.c3 when 3 } }
        DVID2 : { use is dvid }
        DV2 :   { use is dv, define={1 in DVID2 as CP_obs, 2 in DVID2 as PCA_obs} }
		MDV : { use is mdv }
		DOS : { use is amt, variable=DOSE }
		logtWT:{ use is covariate }  
	} # end DATA_INPUT_VARIABLES
	
    DATA_DERIVED_VARIABLES{
        DT : { use is doseTime, idvColumn=TIME, amtColumn=AMT }
    }
	
	SOURCE {
	    srcfile : {file = "warfarin_conc.csv", 
            inputFormat is nonmemFormat ,
	    	ignore = "#" } 
	} # end SOURCE
} # end data object

fully_populated_par = parObj {
	DECLARED_VARIABLES{ETA_CL;ETA_V}

	# By default a parameter is to be estimated if fix is omitted
 	STRUCTURAL {
		POP_CL : { value = 0.1, lo = 0.001 }
		POP_V : { value = 8, lo = 0.001 } 
		POP_KA : { value = 0.362, lo = 0.001 }
		POP_TLAG : { value=1, lo=0.001 }
		BETA_CL_WT : { value = 0.75, fix = true }
		BETA_V_WT : { value = 1, fix = true } 
		RUV_PROP : { value = 0.1, lo = 0 }
		RUV_ADD : { value = 0.1, lo = 0 }
        POP_IMAX:{value=1, fix=true}
        POP_IC50:{value=1, lo=0} # Common IC50 for the four biomarkers which were found to be highly correlated  
		} # end STRUCTURAL
	VARIABILITY {
		PPV_CL : { value = 0.1, type is sd }
		PPV_V : { value = 0.1, type is sd }
		PPV_KA : { value = 0.1, type is sd }
		PPV_TLAG : { value = 0.1, type is sd, fix=true }
		OMEGA : { parameter=[ETA_CL, ETA_V], value = [0.01], type is corr }
		# Matrix off-diagonal values
        MATRIX_1: {
          type is corr,
          parameter=[ETA_CL,ETA_V],
          value=[0.01]
        }
	} # end VARIABILITY
} # end of parameter object 

fully_populated_mdl = mdlObj {
	IDV{ T }

	COVARIATES{
		DT
        D
        WT
        AGE
		logtWT = ln(WT/70)
		SEX withCategories {female, male}
		tAGE = AGE - 40
		tSEX = if(SEX == SEX.female) then 1 else 0
	}

	VARIABILITY_LEVELS{
		ID : { level=2, type is parameter }
		DV : { level=1, type is observation }
	} 

	STRUCTURAL_PARAMETERS { 
		POP_CL
		POP_V
		POP_KA
		POP_TLAG
		BETA_CL_WT
		BETA_CL_AGE
		BETA_V_WT
		POP_FCL_FEM
		RUV_PROP
		RUV_ADD
	} # end STRUCTURAL_PARAMETERS
	
	VARIABILITY_PARAMETERS {
		PPV_CL
		PPV_V
		PPV_KA
		PPV_TLAG
	} # end VARIABILITY_PARAMETERS 
	
	RANDOM_VARIABLE_DEFINITION(level=ID) {
		ETA_CL ~ Normal(mean = 0, sd = PPV_CL)
		ETA_V ~ Normal(mean = 0, sd = PPV_V)
		ETA_KA ~ Normal(mean = 0, sd = PPV_KA)
		ETA_TLAG ~ Normal(mean = 0, sd = PPV_TLAG)
	} # end RANDOM_VARIABLE_DEFINITION 

	
	INDIVIDUAL_VARIABLES { # This maps to the "Type 3" individual parameter definition in PharmML
        ln(CL) = linear( trans is ln, pop = POP_CL, fixEff = [
              {coeff = BETA_CL_WT, cov = logtWT},
              {coeff = POP_FCL_FEM, cov = FCLSEX },
              {coeff = BETA_CL_AGE, cov = tAGE}
              ], 
              ranEff = [ETA_CL] )
	    ln(V) = linear( trans is ln, pop = POP_V, fixEff = [{coeff=BETA_V_WT, cov=logtWT}] , ranEff = [ETA_V] )
        ln(CL2) = linear( trans is ln, pop = POP_CL, fixEff = [{coeff=BETA_CL_WT, cov=logtWT}] , ranEff = [ETA_CL, ETA_V ])
	    ln(KA) = linear( trans is ln, pop = POP_KA, ranEff = [ETA_KA] )
	    ln(TLAG) = linear( trans is ln, pop = POP_TLAG, ranEff = [ETA_TLAG] )
	    indiv_BASE = general(grp=BASE, ranEff = [ETA_V])
	    HBASE = V/365
	    KA=ln(2)/AGE
	    TLAG = exp(POP_TLAG + ETA_TLAG)
	    F1 = 1
      ln(BM0) = linear(trans is ln, pop = POP_V, ranEff = [ETA_CL])
      ln(BM02) = linear(trans is ln, pop = POP_CL, ranEff = [ETA_CL]) 

	} # end INDIVIDUAL_VARIABLES

   MODEL_PREDICTION{
     DOSE
     IMAX
     IC50
     AUC = DOSE/CL
     lnLAMBDA=ln(indiv_BASE) + POP_TLAG*CL
     LAMBDA = exp(lnLAMBDA)
     CC = if (T - DT < TLAG) then 0
          elseif (T - DT == TLAG) then 1
          else (D/V) * KA/(KA-T) * (exp(-(T -DT-TLAG))- exp(-KA*(T-DT-TLAG)))
   
     DEQ {
        RATEIN = if(T >= TLAG) then GUT * KA else 0
        GUT : { deriv =(- RATEIN), init = 0, x0 = 0 }
        CENTRAL : { deriv =(RATEIN - CL * CENTRAL / V), init = 0, x0 = 0 }
        
       EFF = IMAX*AUC/(IC50+AUC)
       PCA = EFF
       
       VEGF : {deriv=KA -CL2*(1-EFF)*VEGF, init=BM0}
       sVEGFR2 : {deriv=KA*(1-AUC)-VEGF, init=BM02, wrt=T}
     }

     COMPARTMENT{
       CC = CENTRAL / V 
       INPUT_KA:   {type is depot, modelCmt=1, to=CENTRAL, ka=KA, tlag=TLAG}
       CENTRAL:    {type is compartment, modelCmt=2}
              ::   {type is elimination, modelCmt=2, from=CENTRAL, v=V}
       PERIPHERAL: {type is distribution, modelCmt=3, from=CENTRAL, kin=KA, kout=KA}
     }# end COMPARTMENT

      F=CENTRAL/AGE
      CC2=F
      HAZ = HBASE * (1+CC2)
      
      Prob0 = DV
      Prob1 = CC - DV
      Prob2 = DV - TLAG
      Prob3 = TLAG
   
   }# end MODEL_PREDICTION
	
	RANDOM_VARIABLE_DEFINITION(level=DV){
	    EPS_Y ~ Normal(mean = 0, var = 1) # This maps the standard error model in PharmML. The error model is predefined.
	}
	
    GROUP_VARIABLES{
      BASE = ln(POP_CL/(1-POP_CL))
      HBASE = POP_V/365
      FCLSEX = if(SEX == SEX.female) then 1 else 0
      GRPCL = ln(POP_CL * POP_V * DV ) + BETA_CL_WT * logtWT
      GRPV = POP_V * (WT/70)^BETA_V_WT
    }

    OBSERVATION {
	    Y1 = combinedError1(additive = RUV_ADD, proportional = RUV_PROP, eps = EPS_Y, prediction = CC )
	    Y2 : { type is count, distn = Poisson(lambda = LAMBDA) }
	    Y3 : { type is discrete, distn = Binomial(probabilityOfSuccess=Prob0, numberOfTrials=1) }
	    Y4 : {type is categorical withCategories{ c0 when Prob0, c1 when Prob1, c2 when Prob2, c3 when Prob3} }
	    Y5 : {type is tte, hazard = HAZ, event is intervalCensored }
	    LNsKIT_obs = combinedError2(trans is ln, additive=0, proportional=RUV_PROP, prediction=KA)
	    CP_obs = combinedError1( additive = RUV_ADD, proportional = RUV_PROP, eps = EPS_Y, prediction = CC ) 
        PCA_obs = additiveError( additive = RUV_ADD, prediction = PCA )  
	} # end OBSERVATION
} # end of model object

fully_populated_task = taskObj {
	ESTIMATE {
        set algo is saem
        set solver is stiff
        set reltol = 6 # e.g. TOL=6 in NONMEM 
	}
    SIMULATE{ 
        set solver is stiff
    }
} # end of task object


fully_populated_mog = mogObj {
	OBJECTS{
		fully_populated_dat : { type is dataObj }
		fully_populated_mdl : { type is mdlObj }
		fully_populated_par : { type is parObj }
		fully_populated_task : { type is taskObj }
	}
}
