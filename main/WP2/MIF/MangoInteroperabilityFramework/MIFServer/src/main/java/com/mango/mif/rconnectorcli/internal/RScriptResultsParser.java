/* File			:  RScriptResultsParser.java
 * Project		:  MangoInteroperabilityFramework
 * Created on	:  2 Apr 2012
 */
package com.mango.mif.rconnectorcli.internal;

import java.io.File;
import java.util.Map;

import com.google.common.base.Preconditions;
import com.google.common.base.Predicate;
import com.google.common.collect.Iterables;
import com.google.common.collect.Maps;
import com.mango.mif.domain.CommandDefinition;
import com.mango.mif.domain.Parameter;
import com.mango.mif.domain.ParameterDefinition;
import com.mango.mif.domain.ParameterDirection;
import com.mango.mif.domain.ParameterType;

/**
 * 
 * Parses results generated by R script
 * 
 * @version $Revision: $ as of $Date: $
 * <p>SVN Entry : $HeadURL: $
 * <p>SVN ID    : $Id: $
 * <p>Last edited by : $Author: $
 */
public class RScriptResultsParser {
    /**
     * Command definition which results are to be parsed
     */
    private CommandDefinition commandDefinition;
    /**
     * Imput parameters
     */
    private Map<String, Parameter> parameters;
    /**
     * working directory containing results
     */
    private File workingDirectory;
    /**
     * Creates new result parser
     */
    public RScriptResultsParser() {
        
    }

    public void setCommandDefinition(CommandDefinition commandDefinition) {
        this.commandDefinition = commandDefinition;
    }
    
    public void setParameters(Map<String, Parameter> parameters) {
        this.parameters = parameters;
    }
    
    public void setWorkingDirectory(File workingDirectory) {
        this.workingDirectory = workingDirectory;
    }
    
    /**
     * 
     * @return parsed results
     */
    public Map<String,File> getResultFiles() {
        Preconditions.checkNotNull(commandDefinition, "Command definition is not set.");
        Preconditions.checkNotNull(parameters, "Input Parameters must be set.");
        Preconditions.checkNotNull(workingDirectory, "Working directory must be set.");
        Map<String,File> result = Maps.newHashMap();
        
        Iterable<ParameterDefinition> pDefinitions =  Iterables.filter(commandDefinition.getParameters(), new Predicate<ParameterDefinition>() {

            @Override
            public boolean apply(ParameterDefinition parameterDefinition) {
                return parameterDefinition.getDirection().equals(ParameterDirection.OUT) && parameterDefinition.getType().equals(ParameterType.File);
            }
            
        });

        if(pDefinitions.iterator().hasNext()) {
            //TODO here a result xml/json file should be parsed. The file will contain a map of input parameters names and result files
            for(ParameterDefinition pDefinition : pDefinitions) {
                result.put(pDefinition.getName(), new File(workingDirectory,"result-test.csv"));
            }
        } else {
            File[] resultFiles = workingDirectory.listFiles();
            for(File file : resultFiles) {
                result.put(file.getName(), file);
            }
        }
        return result;
    }
}
