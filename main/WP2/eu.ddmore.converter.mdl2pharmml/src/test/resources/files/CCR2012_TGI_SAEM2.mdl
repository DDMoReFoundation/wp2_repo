# nt2mdl 1.032 beta Nick Holford n.holford@auckland.ac.nz
CCR2012_TGI_SAEM2_dat = dataobj{
### Data object
# The data object specifies a table of columns of data variables and the variable names which will be also used by the model object
   HEADER{
      ID=list(type=categorical)
      TIME=list(type=continuous,units="h")
      AMT=list(type=continuous,units="mg")
      DV=list(type=continuous)
      MDV=list(type=categorical)
      EVID=list(type=categorical)
   }# end HEADER

   FILE{
      data=list(
           source="dataLGG_PCV_nh2.csv",
           inputformat="NONMEM")
   }# end FILE
} # end data object

CCR2012_TGI_SAEM2_par = parobj{
### Parameter object
# The parameter object defines the numerical values of the parameters with optional constraints (lo and high values) and units.

   STRUCTURAL{
# The STRUCTURAL block define the structural model parameters.
      #THETA
      POP_PT0=list(value=7.13) # mm
      POP_Q0=list(value=41.2) # mm
      POP_LAMBDAP=list(value=0.121) # mo-1
      POP_KPQ=list(value=0.03) # mo-1
      POP_KQPP=list(value=0.0031) # mo-1
      POP_DELTAQP=list(value=0.008) # mo-1
      POP_GAMA=list(value=0.729)
      POP_KDE=list(value=0.24) # mo-1
      RUV_SD=list(value=1,lo=0) # mm (No estimate reported in CCR2012)
   }# end STRUCTURAL

   VARIABILITY{
# The VARIABILITY block has a more complex structure because it needs to express a lower triangular matrix of parameters and how they are related to each other.
# VARIABILITY parameters may be expressed with a type of "SD" which implies standard deviations on the diagonal and correlations
# on the lower off diagonal elements or "VAR" which implies variances and covariances.
      #OMEGA
      PPV_PT0=list(value=0.25 ,type="VAR")
      PPV_Q0=list(value=0.25 ,type="VAR")
      PPV_LAMBDAP=list(value=0.25 ,type="VAR")
      PPV_KPQ=list(value=0.25 ,type="VAR")
      PPV_KQPP=list(value=0.25 ,type="VAR")
      PPV_DELTAQP=list(value=0.25 ,type="VAR")
      PPV_GAMA=list(value=0.25 ,type="VAR")
      PPV_KDE=list(value=0.25 ,type="VAR",fix=true)
      #SIGMA
      RUV_EPS1=list(value=1 ,type="VAR",fix=true)

   }# end VARIABILITY

} # end of parameter object

### Model object
# The model object receives a list of input data variables from the data object and parameters (constants)from the parameter object.
# The parameter and variable names in the model object must be matched by a similar name in the parameter and data objects.
# Note that variables in the data object and parameters may be defined in the parameter object that are not referenced in the model object.
# Model variables are derived from the input data variables and parameters using algebraic expressions.
CCR2012_TGI_SAEM2_mdl = mdlobj{

   INPUT_VARIABLES{
# A name for each input data variable is required. Special uses of input data variables are indicated by the use attribute if the data variable name is not a standard name. Standard names may include ID, IDV, AMT, DV, MDV, etc. similar to standard data items recognized by NM-TRAN or Monolix. The type option is not required but may be useful as metadata. This kind of metadata (with an option to recode) could alternatively be specified in the data object.
      ID=list(use=id, level=2)
      TIME=list(use=idv,units="h")
      AMT=list(use=amt,units="mg")
      DV=list(type=continuous, use=dv, level=1)
      MDV=list(use=mdv)
      EVID=list(use=evid)
   }# end INPUT_VARIABLES

# The STRUCTURAL_PARAMETERS Block defines the structural model parameters.
   STRUCTURAL_PARAMETERS{
# A name for each parameter is required. Other attributes such as units are optional.
# Units may be used to achieve consistency between the parameter, data and model object values.
# This could be implemented during the WP2 translation process.

      #THETA
      POP_PT0
      POP_Q0
      POP_LAMBDAP
      POP_KPQ
      POP_KQPP
      POP_DELTAQP
      POP_GAMA
      POP_KDE
      RUV_SD
   }# end STRUCTURAL_PARAMETERS

   VARIABILITY_PARAMETERS{
# The VARIABILITY_PARAMETERS Block defines the variability parameters.
      #OMEGA
      PPV_PT0
      PPV_Q0
      PPV_LAMBDAP
      PPV_KPQ
      PPV_KQPP
      PPV_DELTAQP
      PPV_GAMA
      PPV_KDE
      #SIGMA
      RUV_EPS1
   }# end VARIABILITY_PARAMETERS


   RANDOM_VARIABLE_DEFINITION{
# The RANDOM_VARIABLE_DEFINITION block is used to define the distribution of random variables.
      eta_PPV_PT0 ~ (type=Normal, mean=0, variance=PPV_PT0,level=ID)
      eta_PPV_Q0 ~ (type=Normal, mean=0, variance=PPV_Q0,level=ID)
      eta_PPV_LAMBDAP ~ (type=Normal, mean=0, variance=PPV_LAMBDAP,level=ID)
      eta_PPV_KPQ ~ (type=Normal, mean=0, variance=PPV_KPQ,level=ID)
      eta_PPV_KQPP ~ (type=Normal, mean=0, variance=PPV_KQPP,level=ID)
      eta_PPV_DELTAQP ~ (type=Normal, mean=0, variance=PPV_DELTAQP,level=ID)
      eta_PPV_GAMA ~ (type=Normal, mean=0, variance=PPV_GAMA,level=ID)
      eta_PPV_KDE ~ (type=Normal, mean=0, variance=PPV_KDE,level=ID)
      eps_RUV_EPS1 ~ (type=Normal, mean=0, variance=RUV_EPS1,level=DV)
   }# end RANDOM_VARIABLE_DEFINITION

   INDIVIDUAL_VARIABLES{
# The INDIVIDUAL_VARIABLES block is used to express the individual variables and their distribution.
# If this is not a population model then this block is not required.

      PT0=POP_PT0*exp(eta_PPV_PT0)
      Q0=POP_Q0*exp(eta_PPV_Q0)
      LAMBDAP=POP_LAMBDAP*exp(eta_PPV_LAMBDAP)
      KPQ=POP_KPQ*exp(eta_PPV_KPQ)
      KQPP=POP_KQPP*exp(eta_PPV_KQPP)
      DELTAQP=POP_DELTAQP*exp(eta_PPV_DELTAQP)
      GAMA=POP_GAMA*exp(eta_PPV_GAMA)
      KDE=POP_KDE*exp(eta_PPV_KDE)
      K=100
   #Initial conditions
   }# end INDIVIDUAL_VARIABLES

   MODEL_PREDICTION{
# The MODEL_PREDICTION block calculates model predictions based on model variables defined in the previous model object blocks.
# Code in this block expresses the structural model after group and individual parameter differences have been included.
# It can be considered as an expression of a deterministic prediction. It is the essential component of a shared sub-model.
# This block should not contain any covariate computations expressing predictable or unpredictable (random) between subject differences.


      ## COMPARTMENTS
      ## 
      ## COMP =  C
      ## COMP =  PT
      ## COMP =  Q
      ## COMP =  QP

   ODE{
      C=C_m
      PT=PT_m
      Q=Q_m
      QP=QP_m
      DPSTAR=PT+Q+QP
      C_m=ode(deriv= -KDE*C ) # conc in KPD effect compartment
      PT_m=ode(deriv= LAMBDAP*PT*(1-DPSTAR/K) + KQPP*QP - KPQ*PT - GAMA*PT*KDE*C ,init=PT0) # proliferating cells
      Q_m=ode(deriv= KPQ*PT - GAMA*Q*KDE*C ,init=Q0) # quiescent cells
      QP_m=ode(deriv= GAMA*Q*KDE*C - KQPP*QP - DELTAQP*QP ) # damage quiescent cells
   }# end ODE

   LIBRARY{
      ##  ADVAN13 TOL=6
      amount=nmadvan(model=13,ncmt=4)
   }# end LIBRARY
   
      PSTAR=PT_m+Q_m+QP_m
   #   Y=PSTAR + THETA(9)*ERR(1)
   }# end MODEL_PREDICTION

   OBSERVATION{
      Y = PSTAR+ RUV_SD*eps_RUV_EPS1
   }# end OBSERVATION


   OUTPUT_VARIABLES{
# The OUTPUT block specifies the model variables that may be exported from the model object.
      ID
      TIME
      Y
   }# end OUTPUT_VARIABLES

} # end of model object

CCR2012_TGI_SAEM2_task = taskobj{
### Task Properties object
# Modelling tasks often have many options which the user may specify.
# The task properties object provides a way to collect together options for commonly performed tasks.
# The task properties object may define functions which behave like a function in R. It is called with a set of arguments and returns a result object.
# Following the R language convention the last evaluated statement in a function is used as the default result object returned by the function.

# A task function is defined with the Model Coding Language

# TARGET specific code

IMPORT{nmadvan = list(target = NMTRAN_CODE, name="ADVAN", param=list(model=2, trans=2, ncmt=2))}
TARGET_CODE(target=NMTRAN_CODE,location="$PROBLEM",first=true){***
$PROB CCR2012 RIBBA TUMOUR GROWTH INHIBITION
***} # end TARGET_CODE

# End TARGET specific code

   MODEL{
      tolrel=6
   }# end MODEL

   ## TABLE
   #NOPRINT ONEHEADER FILE=tgi.fit 

   myEST=function(t,m,p,d) { 
      EXECUTE{
         command="call nmgo CCR2012_TGI_SAEM2"
      }# end EXECUTE

      # estimate (more options will typically be needed)
      ESTIMATE {
         target=t
         model=m
         parameter=p
         data=d


TARGET_CODE(target=NMTRAN_CODE,location="$ESTIMATION"){***
$EST METHOD=SAEM NBURN=3000 NITER=1000 ISAMPLE=1 NSIG=2 SIGL=6
CTYPE=3 CITER=10 CALPHA=0.05 NOPRIOR=1
;LAPLACE NUMERICAL SLOW
NOABORT PRINT=10
GRD=TS(9) FILE=CCR2012_TGI_SAEM2.raw
$COV MATRIX=R PRINT=E UNCONDITIONAL SIGL=8
***} # end TARGET_CODE
            algo=list("SAEM ")
            sig=2
            cov="y"
      }# end ESTIMATE
   }# end of myEST

}# end of task object

CCR2012_TGI_SAEM2_tel = telobj{
## The TEL is used to specify the sequence of execution of tasks.
# Result objects are returned by each task statement which may be used by subsequent tasks.


# Fit model using NONMEM

CCR2012_TGI_SAEM2_fit=CCR2012_TGI_SAEM2_task$myEST(t="NONMEM", m=CCR2012_TGI_SAEM2_mdl, p=CCR2012_TGI_SAEM2_par, d=CCR2012_TGI_SAEM2_dat)

# Update parameter estimates with final estimates
CCR2012_TGI_SAEM2_par=update(CCR2012_TGI_SAEM2_fit,CCR2012_TGI_SAEM2_par)

} # end of task execution language code
