grammar eu.ddmore.pml.PharmML with org.eclipse.xtext.common.Terminals

generate pharmML "http://www.ddmore.eu/pml/PharmML"

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//***PharmaML***//
//////////////////////////////////////////////////////////////////////////////////////////////////////////

Mml_PharmML hidden(WS, ML_COMMENT, XML_ANNOTATION):
	TAG_OPEN
		'PharmML' 
		xmlns += XS_xmlns*
		name = ct_name
		independentVar = ct_independentVar 
		writtenVersion = ct_writtenVersion 
	TAG_CLOSE 
		SymbolDefinition += Mml_SymbolDefinitionType*
		Expr += Mml_PharmaMLContent+
		Design = design_TrialDesignType?
	 	ModelingSteps = msteps_ModelingSteps?	
	TAG_OPEN2 'PharmML' TAG_CLOSE
;

Mml_PharmaMLContent: {Mml_PharmaMLContent}	
	StructuralModel =  mdef_StructuralModelType | 
	ModelDefinition = mdef_ModelDefinitionType 
;
 
Mml_SymbolDefinitionType: {Mml_SymbolDefinitionType}
	TAG_OPEN
		'SymbolDefinition'  
		xmlns += XS_xmlns*
		name = ct_name? 
		symbId = ct_symbId 
		symbolType = ct_symbolType
	(TAG_CLOSE2 | (TAG_CLOSE 
		Description = ct_AnnotationType?
		FunctionDefinition = Mml_FunctionDefinitionType
	TAG_OPEN2 'SymbolDefinition' TAG_CLOSE))	
;	

Mml_FunctionDefinitionType: {Mml_FunctionDefinitionType}
   TAG_OPEN
   	  'FunctionDefinition' 
   	  xmlns += XS_xmlns*
   (TAG_CLOSE2 | (TAG_CLOSE  
	  FunctionArguments += Mml_FuncParameterDefinitionType*
	  Definition = ct_DefinitionRhsType
  TAG_OPEN2 'FunctionDefinition' TAG_CLOSE));

Mml_FuncParameterDefinitionType: {Mml_FuncParameterDefinitionTyp}
   TAG_OPEN
   		'FunctionArgument' 
		xmlns += XS_xmlns*
		sumbId = ct_symbId 	
		symbolType = ct_symbolType? 
	(TAG_CLOSE2 | (TAG_CLOSE 
   		Decsription = ct_AnnotationType? 
    TAG_OPEN2 'FunctionArgument' TAG_CLOSE))
 ;

//***************************************************************************************************
//***ModelDefinition***
//***************************************************************************************************

mdef_ModelDefinitionType: {mdef_ModelDefinitionType}
	TAG_OPEN
		'ModelDefinition' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		VariabilityLevel += mdef_VariabilityLevelDefnType* 
		CovariateModel = mdef_CovariateModelType? 
		ParameterModel = mdef_ParameterModelType?
		StructuraModel += mdef_StructuralModelType*
		ObservationModel = mdef_ObservationModelType? 
	TAG_OPEN2 'ModelDefinition' TAG_CLOSE))
;

mdef_ParameterTypeName:
	log = '"log"' |	logit = '"logit"' | none = '"none"'
; 

mdef_StructuralModelType:
	TAG_OPEN
		'StructuralModel' 
		xmlns += XS_xmlns*
		id = ct_id 
	 (TAG_CLOSE2 | (TAG_CLOSE 
		Description = ct_AnnotationType? 
		Parameter += mdef_ParameterType* 
		Variable += ct_VariableDefinitionType* 
		Import += mdef_ImportType*
		InitiaCondition += mdef_InitialConditionType*
	TAG_OPEN2 'StructuralModel' TAG_CLOSE))
;

mdef_ObservationModelType:
	TAG_OPEN
		'ObservationModel' 
		xmlns += XS_xmlns*
		id = ct_id
		name = ct_name? 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Parameter += mdef_ParameterType* 
		Continuous += mdef_ContinuousObsModelType*
	TAG_OPEN2 'ObservationModel' TAG_CLOSE))			
;

mdef_ContinuousObsModelType:
	TAG_OPEN
		'Continuous' 
		xmlns += XS_xmlns*
		symbId = ct_symbId 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Var = Math_VarType? 
		ErrorModel = mdef_ErrorModel
		RandomEffect += mdef_RandomEffectType*		
		TAG_OPEN2 'Continuous' TAG_CLOSE
	))
;

mdef_ErrorModel: {mdef_ErrorModel}
	TAG_OPEN
		'ErrorModel' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Var = Math_VarType
		FunctionArgument +=  Math_FunctionArgumentType* 	
	TAG_OPEN2 'ErrorModel' TAG_CLOSE))
;

mdef_RandomEffectType: {mdef_RandomEffectType}
	TAG_OPEN
		'RandomEffect' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Distribution = uncert_DistributionType
	TAG_OPEN2 'RandomEffect' TAG_CLOSE))	
;

mdef_ParameterModelType:
	TAG_OPEN
		'ParameterModel' 
		xmlns += XS_xmlns*
		id = ct_id 
		name = ct_name? 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Parameter += mdef_ParameterType+ 
		Correlation += mdef_CorrelationType*
	TAG_OPEN2 'ParameterModel' TAG_CLOSE))		
;

mdef_CorrelationType:
	TAG_OPEN
	'Correlation' 
		xmlns += XS_xmlns*
		levelId = ct_levelId 
	(TAG_CLOSE2 | (TAG_CLOSE 
		ParamVar1 = mdef_Param1VarType 
		ParamVar2 = mdef_Param2VarType 
		CorrelationCoefficient = mdef_CorrelationCoefficientType?
		Covariance = mdefCovarianceType?
	TAG_OPEN2 'Correlation' TAG_CLOSE))	
;

mdef_Param1VarType: 
	TAG_OPEN
		'Param1Var' 
		xmlns += XS_xmlns*
		block = Math_block? 
		symbId = Math_symbId 
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'Param1Var' TAG_CLOSE))
;

mdef_Param2VarType: 
	TAG_OPEN
		'Param2Var' 
		xmlns += XS_xmlns*
		block = Math_block? 
		symbId = Math_symbId 
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'Param2Var' TAG_CLOSE))
;

mdefCovarianceType: {mdefCovarianceType}
	TAG_OPEN
		'Covariance' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = ct_ScalarRhs
	TAG_OPEN2 'Covariance' TAG_CLOSE))		
;

mdef_CorrelationCoefficientType:{mdef_CorrelationCoefficientType}
	TAG_OPEN
		'CorrelationCoefficient'
		xmlns += XS_xmlns* 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = ct_ScalarRhs
	TAG_OPEN2 'CorrelationCoefficient' TAG_CLOSE))	
;


mdef_CovariateModelType:
	TAG_OPEN
	'CovariateModel' 
		xmlns += XS_xmlns*
		id = ct_id
		name = ct_name? 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Parameter += mdef_ParameterType* 
		Covariate += mdef_CovariateVariabilityType+
	TAG_OPEN2 'CovariateModel' TAG_CLOSE))	
;

mdef_ParameterType:
	TAG_OPEN
	'Parameter' 
		xmlns += XS_xmlns*
		name = ct_name? 
		symbId = Math_symbId 
		transformation= mdef_transformation? 
	 (TAG_CLOSE2 | (TAG_CLOSE
		Var = Math_VarType? 
		Scalar = Math_ScalarType?
		Equation = Math_EquationType? 
		RandomEffect += mdef_ParameterRandomEffectType*
		Covariate +=  mdef_CovariateType* 
	TAG_OPEN2 'Parameter' TAG_CLOSE))
;

mdef_CovariateVariabilityType:
	TAG_OPEN
	'Covariate' 
		xmlns += XS_xmlns*
		name = ct_name? 
		symbId = ct_symbId 
		transformation = mdef_transformation? 
	  (TAG_CLOSE2 | (TAG_CLOSE
		Continuous = mdef_ContinuousCovariateType?
		Categorical = mdef_CategoricalType?
	TAG_OPEN2 'Covariate' TAG_CLOSE))
;

mdef_transformation:
	'transformation' '=' transformation= mdef_ParameterTypeName
;

mdef_CategoricalType: {mdef_CategoricalType}
	TAG_OPEN
		'Categorical' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE
		Category += mdef_CategoryType*
	TAG_OPEN2 'Categorical' TAG_CLOSE))	
;


mdef_ContinuousCovariateType:{mdef_ContinuousCovariateType}
	TAG_OPEN
		'Continuous' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Distribution = uncert_DistributionType 
		Transformation = mdef_TransformationType  
	TAG_OPEN2 'Continuous' TAG_CLOSE))	
;

mdef_TransformationType:{mdef_TransformationType}
	TAG_OPEN
		'Transformation' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = ct_Rhs
	TAG_OPEN2 'Transformation' TAG_CLOSE))	
;

mdef_VariabilityLevelDefnType:
	TAG_OPEN
		'VariabilityLevel' 
		xmlns += XS_xmlns*
		id = ct_id 
		name = ct_name? 
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'VariabilityLevel' TAG_CLOSE))
;

mdef_ImportType:
	TAG_OPEN
		'Import' 
		xmlns += XS_xmlns*
		'resource' '=' resource = XS_ANY_URI 
		('resourceType' '=' resourceType = mdef_ImportResourceTypeType)? 
		('source' '=' source =  XS_TOKEN)? 
	 (TAG_CLOSE2 | (TAG_CLOSE 
		Link += mdef_ImportLinkType+
	TAG_OPEN2 'Import' TAG_CLOSE))
;

mdef_ImportLinkType:
	TAG_OPEN
		'Link' 
		xmlns += XS_xmlns*
		'symbolPtr' '=' symbolPtr = XS_STRING 
	 (TAG_CLOSE2 | (TAG_CLOSE 
		Var = Math_VarType
	TAG_OPEN2 'Link' TAG_CLOSE))	
;

mdef_ImportResourceTypeType:
	sbml = '"sbml"' | pharmml = '"pharmml"'
;

mdef_CovariateType:{mdef_CovariateType}
	TAG_OPEN
		'Covariate' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Var = Math_VarType 
		FixedEffect += mdef_FixedEffectType+ 
	TAG_OPEN2 'Covariate' TAG_CLOSE	))
;

mdef_FixedEffectType:{mdef_FixedEffectType}
	TAG_OPEN
		'FixedEffect' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Var = Math_VarType 
		Category = mdef_CategoryType? 
	TAG_OPEN2 'FixedEffect' TAG_CLOSE))
;

mdef_CategoryType:
	TAG_OPEN
		'Category' 
		xmlns += XS_xmlns*
		catId = ct_catId 
		name = ct_name? 
	(TAG_CLOSE2 | (TAG_CLOSE  
		Probability = mdef_ProbabilityType?
	TAG_OPEN2 'Category' TAG_CLOSE))		
;

mdef_ProbabilityType:{mdef_ProbabilityType}
	TAG_OPEN
		'Probability'
		xmlns += XS_xmlns* 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = ct_Rhs
	TAG_OPEN2 'Probability' TAG_CLOSE ))
;

mdef_ParameterRandomEffectType:
	TAG_OPEN
	'RandomEffect' 
		xmlns += XS_xmlns*
		levelId =  ct_levelId 
		name = ct_name? 
		symbId = ct_symbId  
	(TAG_CLOSE2 | (TAG_CLOSE 
		Distribution = uncert_DistributionType
	TAG_OPEN2 'RandomEffect' TAG_CLOSE	))
;


mdef_InitialConditionType:
	TAG_OPEN
	'InitialCondition' 
		xmlns += XS_xmlns*
		block = Math_block? 
		symbID = Math_symbId 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = ct_Rhs
	TAG_OPEN2 'InitialCondition' TAG_CLOSE	))
;


//***************************************************************************************************
//***Modelling steps***
//***************************************************************************************************

msteps_ModelingSteps:{msteps_ModelingSteps}
	TAG_OPEN
		'ModellingSteps' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Variable += ct_VariableDefinitionType* 
		Expr += msteps_ModelingStepsContent*
		StepDependencies = msteps_StepDependenciesType
	TAG_OPEN2 'ModellingSteps' TAG_CLOSE))
;

msteps_ModelingStepsContent:
	EstimationStep = msteps_EstimationStep |
	SimulationStep = msteps_SimulationStep
;

msteps_StepDependenciesType:{msteps_StepDependenciesType}
	TAG_OPEN
		'StepDependencies'
		xmlns += XS_xmlns* 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Description = ct_AnnotationType? 
		Step += msteps_StepType+
	TAG_OPEN2 'StepDependencies' TAG_CLOSE))		
;

msteps_StepType:
	TAG_OPEN
		'Step' 
		xmlns += XS_xmlns*
		'idRef' '=' idRef = XS_STRING 
	(TAG_CLOSE2 | (TAG_CLOSE
		DependantStep += msteps_DependantStepType*
	TAG_OPEN2 'Step' TAG_CLOSE))	
;

msteps_DependantStepType:
	TAG_OPEN
		'DependantStep' 
		xmlns += XS_xmlns*
		'idRef' '=' idRef = ct_BlockNameType 
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'DependantStep' TAG_CLOSE))
;	


msteps_EstimationStep:
	TAG_OPEN
		'EstimationStep' 
		xmlns += XS_xmlns*
		id = ct_id 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Description = ct_AnnotationType? 
		InitialValue += msteps_InitialValueType*
		ObjectiveDataSet = msteps_ObjectiveDataSetType 
		ParametersToEstimate = msteps_ParametersToEstimateType 
		EstimationOperation += msteps_EstimationOperationType+
	TAG_OPEN2 'EstimationStep' TAG_CLOSE))	
;

msteps_ParametersToEstimateType:{msteps_ParametersToEstimateType}
	TAG_OPEN
		'ParametersToEstimate' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Variable += mSteps_VariableEstimateType*
	TAG_OPEN2 'ParametersToEstimate' TAG_CLOSE))		
;

mSteps_VariableEstimateType:
	TAG_OPEN
		'Variable' 
		xmlns += XS_xmlns*
		((block = Math_block)? &
		(fixed = mSteps_fixed) &
		symbID = Math_symbId) 
	(TAG_CLOSE2 | (TAG_CLOSE 
		InitialEstimate = mSteps_InitialEstimateType? 
		LowerBound = mSteps_LowerBoundType? 
		UpperBound = mSteps_UpperBoundType? 
	TAG_OPEN2 'Variable' TAG_CLOSE))		
;

mSteps_fixed:
	'fixed' '=' fixed = (Math_TRUE | Math_FALSE)
;

mSteps_UpperBoundType:{mSteps_UpperBoundType}
	TAG_OPEN 
		'UpperBound' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = ct_ScalarRhs
	TAG_OPEN2 'UpperBound' TAG_CLOSE))		
;


mSteps_LowerBoundType:{mSteps_LowerBoundType}
	TAG_OPEN
		'LowerBound' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = ct_ScalarRhs
	TAG_OPEN2 'LowerBound' TAG_CLOSE))		
;

mSteps_InitialEstimateType:{mSteps_InitialEstimateType}
	TAG_OPEN
		'InitialEstimate' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = ct_ScalarRhs
	TAG_OPEN2 'InitialEstimate' TAG_CLOSE))		
;


msteps_ObjectiveDataSetType:
	TAG_OPEN
		'ObjectiveDataSet' 
		xmlns += XS_xmlns*
		'dataSetRef' '=' dataSetRef = ct_SymbolNameType 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Mapping += msteps_ColumnMappingType+
	TAG_OPEN2 'ObjectiveDataSet' TAG_CLOSE))		
;

msteps_ColumnMappingType:
	TAG_OPEN
		'Mapping' 
		xmlns += XS_xmlns*
		'columnName' '=' columnname = ct_SymbolNameType 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr += msteps_ColumnMappingTypeContent*
		Restriction = ct_RestrictionType?
	TAG_OPEN2 'Mapping' TAG_CLOSE))
;

msteps_ColumnMappingTypeContent:
	Var = Math_VarType | 
	UseVariabilityLevel = msteps_UseVariabilityLevel |
	UseVariabilityNode = msteps_UseVariabilityNode |
	DoseVar = design_DoseVarType |
	TargetVar = msteps_TargetVarType |
	Assign = msteps_AssignType | 
	Output = msteps_OutputType 
;

msteps_OutputType:{msteps_OutputType}
	TAG_OPEN
		'Output' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Vars = Math_VarType
	TAG_OPEN2 'Output' TAG_CLOSE))	
;

msteps_AssignType:
	TAG_OPEN
		'Assign' 
		xmlns += XS_xmlns*
		block = Math_block? 
		symbId = Math_symbId  
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = ct_Rhs
	TAG_OPEN2 'Assign' TAG_CLOSE))		
;

msteps_TargetVarType:
	TAG_OPEN
		'TargetVar' 
		xmlns += XS_xmlns*
		block = Math_block? 
		symbId = Math_symbId  
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'TargetVar' TAG_CLOSE))	
;

msteps_UseVariabilityLevel:
	TAG_OPEN
		'UseVariabilityLevel' 
		xmlns += XS_xmlns*
		'levelId' '=' levelId = ct_BlockNameType 
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'UseVariabilityLevel' TAG_CLOSE))
;

msteps_UseVariabilityNode:
	TAG_OPEN
		'UseVariabilityNode' 
		xmlns += XS_xmlns*
		block = Math_block? 
		symbId = Math_symbId 
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'UseVariabilityNode' TAG_CLOSE))
;

msteps_SimulationStep:
	TAG_OPEN
		'SimulationStep' 
		xmlns += XS_xmlns*
		id = ct_id 
	(TAG_CLOSE2 | (TAG_CLOSE
		Description = ct_AnnotationType? 
		Replicates = ct_ReplicatesType? 
		InitialValue += msteps_InitialValueType* 
		SimDataSet = msteps_SimDataSetType? 
		Observations += msteps_ObservationsType* 
	TAG_OPEN2 'SimulationStep' TAG_CLOSE))	
;

msteps_SimDataSetType:
	TAG_OPEN
		'SimDataSet' 
		xmlns += XS_xmlns*
		'dataSetRef' '=' dataSetRef = ct_SymbolNameType 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Mapping += msteps_ColumnMappingType+
	TAG_OPEN2 'SimDataSet' TAG_CLOSE))		
;


msteps_ObservationsType:{msteps_ObservationsType}
	TAG_OPEN
		'Observations'
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Timepoints  = msteps_TimepointsType 
		Output += msteps_OutputType* 
		WriteTo += msteps_WriteToType*
	TAG_OPEN2 'Observations' TAG_CLOSE))		
;

msteps_WriteToType:{msteps_WriteToType}
	TAG_OPEN
		'WriteTo' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Var = Math_VarType 
		Mapping += msteps_ColumnMappingType+
	TAG_OPEN2 'WriteTo' TAG_CLOSE))
;


msteps_TimepointsType:{msteps_TimepointsType}
	TAG_OPEN
		'Timepoints' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = ct_Rhs
	TAG_OPEN2 'Timepoints' TAG_CLOSE))	
;

msteps_InitialValueType:
	TAG_OPEN
		'InitialValue' 
		xmlns += XS_xmlns*
		block = ct_block?
		symbId = ct_symbId 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = ct_Rhs?
	TAG_OPEN2 'InitialValue' TAG_CLOSE))
;


msteps_EstimationOperationType:
	TAG_OPEN
		'EstimationOperation' 
		'opType' '=' opType = Math_EstimationOperationType
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'EstimationOperation' TAG_CLOSE))
;


//***************************************************************************************************
//***Design***
//***************************************************************************************************
 
design_TrialDesignType:{design_TrialDesignType}
	TAG_OPEN
		'Design'
		xmlns += XS_xmlns* 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Treatment += design_TreatmentType+ 
		TreatmentEpoch += design_TreatmentEpohType+ 
		Group += design_GroupType+
	TAG_OPEN2 'Design' TAG_CLOSE))
;

design_GroupType:
	TAG_OPEN
	'Group' 
		xmlns += XS_xmlns*
		id = ct_id 
		name = ct_name? 
	 (TAG_CLOSE2 | (TAG_CLOSE 
	    Expr += design_GroupTypeContent*
		Individuals = design_IdividualsType
	TAG_OPEN2 'Group' TAG_CLOSE))	
;

design_GroupTypeContent:
	TreatmentEpochRef = design_TreatmentEpochRefType |  
	Washout = design_WashoutType 
;

design_IdividualsType:
	TAG_OPEN
	'Individuals' 
		xmlns += XS_xmlns*
		levelId =  ct_levelId 
		name = ct_name? 
		symbId = ct_symbId  
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = ct_Rhs
	TAG_OPEN2 'Individuals' TAG_CLOSE))	
;

design_WashoutType: {design_WashoutType}
	TAG_OPEN
		'Washout' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'Washout' TAG_CLOSE))	
;


design_TreatmentEpohType:
	TAG_OPEN
	'TreatmentEpoch' 
		xmlns += XS_xmlns*
		id = ct_id  
		name = ct_name? 
	 (TAG_CLOSE2 | (TAG_CLOSE 
		TreatmentRef += design_TreatmentRefType+ 
		Start = design_StartType?
		End = design_EndType? 
		Occasion += design_OccasionType* 
	TAG_OPEN2 'TreatmentEpoch' TAG_CLOSE))	
;

design_OccasionType:
	TAG_OPEN
	'Occasion' 
		xmlns += XS_xmlns*
		levelId =  ct_levelId 
		name = ct_name? 
		symbId = ct_symbId  
	(TAG_CLOSE2 | (TAG_CLOSE 
		Begin = design_BeginType 
		End = design_EndType
	TAG_OPEN2 'Occasion' TAG_CLOSE))	
;

design_BeginType: {design_BeginType}
	TAG_OPEN
		'Begin' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = ct_ScalarRhs
	TAG_OPEN2 'Begin' TAG_CLOSE))	
;

design_EndType:{design_EndType}
	TAG_OPEN
		'End' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = ct_ScalarRhs
	TAG_OPEN2 'End' TAG_CLOSE))	
;

design_StartType:{design_StartType}
	TAG_OPEN
		'Start' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = ct_ScalarRhs
	TAG_OPEN2 'Start' TAG_CLOSE))
;


design_TreatmentRefType:
	TAG_OPEN
		'TreatmentRef' 
		xmlns += XS_xmlns*
		'idRef' '=' idRef = Math_BlockNameType 
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'TreatmentRef' TAG_CLOSE))	
;

design_TreatmentEpochRefType:
	TAG_OPEN
		'TreatmentEpochRef' 
		xmlns += XS_xmlns*
		'idRef' '=' idRef = Math_BlockNameType 
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'TreatmentEpochRef' TAG_CLOSE))		
;

design_TreatmentType:
	TAG_OPEN
	'Treatment' 
		id = Math_id  
		name = ct_name? 
		xmlns += XS_xmlns*
	 (TAG_CLOSE2 | (TAG_CLOSE 
		DosingRegimen += design_DosingRegimenType+
	TAG_OPEN2 'Treatment' TAG_CLOSE))
;

design_DosingRegimenType: {design_DosingRegimenType}
	TAG_OPEN
		'DosingRegimen' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Bolus = design_BolusType?
		Infusion = design_InfusionType?
	TAG_OPEN2 'DosingRegimen' TAG_CLOSE))
;

design_InfusionType:{design_InfusionType}
	TAG_OPEN 
		'Infusion'  
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		DoseAmount = design_DoseAmountType 
		SteadyState = design_SteadyStateType?
		DosingTimes = design_DosingTimesType?
		Duration =  design_DurationType 
	TAG_OPEN2 'Infusion' TAG_CLOSE))
;

design_DurationType:{design_DurationType}
	TAG_OPEN
		'Duration'  
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = design_DosingVariableType
	TAG_OPEN2 'Duration' TAG_CLOSE))	
;

design_BolusType:{design_BolusType}
	TAG_OPEN
		'Bolus' 
		xmlns += XS_xmlns* 
	(TAG_CLOSE2 | (TAG_CLOSE 
		DoseAmount = design_DoseAmountType 
		SteadyState = design_SteadyStateType? 
		DosingTimes = design_DosingTimesType?
	TAG_OPEN2 'Bolus' TAG_CLOSE))
;

design_DosingTimesType: {design_DosingTimesType}
	TAG_OPEN
		'DosingTimes'  
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE
		Expr += design_DosingTimesTypeContent+
	TAG_OPEN2 'DosingTimes' TAG_CLOSE))		
;

design_DosingTimesTypeContent:
	Sequence = ct_SequenceType |
		Scalar = Math_ScalarType 
;

design_SteadyStateType:{design_SteadyStateType}
	TAG_OPEN
		'SteadyState'  
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		DosingStart = design_DosingStartType 
		DosingPeriod = design_DosingPeriodType
	TAG_OPEN2 'SteadyState' TAG_CLOSE))	
;


design_DosingStartType:{design_DosingStartType}
	TAG_OPEN
		'DosingStart'  
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = design_DosingVariableType
	TAG_OPEN2 'DosingStart' TAG_CLOSE))		
;

design_DosingPeriodType: {design_DosingPeriodType}
	TAG_OPEN
		'DosingPeriod'  
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE
		Expr = design_DosingVariableType?	
	TAG_OPEN2 'DosingPeriod' TAG_CLOSE))		
;

design_DoseAmountType: {design_DoseAmountType}
	TAG_OPEN
		'DoseAmount' 
		xmlns += XS_xmlns* 
	(TAG_CLOSE2 | (TAG_CLOSE
		Expr = design_DosingVariableType?	
	TAG_OPEN2 'DoseAmount' TAG_CLOSE))
;

design_DosingVariableType:
	Expr = design_DosingVariableTypeContent
	Amount = design_AmountType? 
;

design_DosingVariableTypeContent:
	DoseVar = design_DoseVarType |
	TargetVar = design_TargetVarType
;
	
design_AmountType:{design_AmountType}
	TAG_OPEN
		'Amount' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = ct_Rhs
	TAG_OPEN2 'Amount' TAG_CLOSE))		
;

design_TargetVarType:
	TAG_OPEN
		'TargetVar' 
		xmlns += XS_xmlns*
		block = Math_block? 
		symbId = Math_symbId  
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'TargetVar' TAG_CLOSE))	
;

design_DoseVarType:
	TAG_OPEN
		'DoseVar' 
		xmlns += XS_xmlns*
		block = Math_block? 
		symbId = Math_symbId   
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'DoseVar' TAG_CLOSE))
;

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//***Uncertainty***
/////////////////////////////////////////////////////////////////////////////////////////////////////////
 
uncert_DistributionType:
	TAG_OPEN
		'Distribution' 
		xmlns += XS_xmlns*
		writtenVersion = ct_writtenVersion 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = uncert_DistributionTypeContent
	TAG_OPEN2 'Distribution' TAG_CLOSE))
;

uncert_DistributionTypeContent:
	Normal = uncert_Normal |
	PDF = uncert_PDF |
	Poison = uncert_Poison | 
	Student = uncert_Student_t | 
	Uniform = uncert_Uniform  
;

uncert_Normal:{uncert_Normal}
	TAG_OPEN
		'Normal' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Mean = uncert_Mean 
		StdDev = uncert_StdDev?  
		Variance = uncert_Variance? 
		CoefficientOfVariance = uncert_CoefficientOfVariance?
	TAG_OPEN2 'Normal' TAG_CLOSE))
;

uncert_CoefficientOfVariance: {uncert_CoefficientOfVariance}
	TAG_OPEN
		'CoefficientOfVariance' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = uncert_DistributionParamType
	TAG_OPEN2 'CoefficientOfVariance' TAG_CLOSE))
;

uncert_StdDev: {uncert_StdDev}
	TAG_OPEN
		'StdDev' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr += uncert_DistributionParamType*
	TAG_OPEN2 'StdDev' TAG_CLOSE))
;

uncert_DistributionParamType:
	Equation = Math_EquationType | 
	Scalar = Math_ScalarType |
	Var = Math_VarType		
;

uncert_MeanParamType:
	Expr = uncert_DistributionParamType
;

uncert_Mean: {uncert_Mean}
	TAG_OPEN
		'Mean' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = uncert_MeanParamType
	TAG_OPEN2 'Mean' TAG_CLOSE))
;

uncert_Variance: {uncert_Variance}
	TAG_OPEN
		'Variance' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = uncert_DistributionParamType
	TAG_OPEN2 'Variance' TAG_CLOSE))	
;

uncert_PDF: {uncert_PDF}
	TAG_OPEN
		'PDF' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		FunctionParameter += uncert_ParameterDefinitionType* 
		Equation = Math_EquationType
	TAG_OPEN2 'PDF' TAG_CLOSE))
;

uncert_ParameterDefinitionType:
	TAG_OPEN
		'FunctionParameter' 
		xmlns += XS_xmlns*
		id = Math_id  
		name = ct_name? 
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'FunctionParameter' TAG_CLOSE))	
;

uncert_Poison: {uncert_Poison}
	TAG_OPEN
		'Poison' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Rate = uncert_Rate
	TAG_OPEN2 'Poison' TAG_CLOSE))	
;

uncert_Rate: {uncert_Rate}
	TAG_OPEN
		'Rate' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = uncert_DistributionParamType
	TAG_OPEN2 'Rate' TAG_CLOSE))	
;


uncert_Student_t: {uncert_Student_t}
	TAG_OPEN
		'Student-t' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Location = uncert_Location 
		Scale = uncert_Scale 
		DegreesOfFreedom = uncertDegreesOfFreedom
	TAG_OPEN2 'Student-t' TAG_CLOSE))		
;

uncertDegreesOfFreedom: {uncertDegreesOfFreedom}
	TAG_OPEN
		'DegreesOfFreedom'
		xmlns += XS_xmlns* 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = uncert_DistributionParamType
	TAG_OPEN2 'DegreesOfFreedom' TAG_CLOSE))		
;

uncert_Scale: {uncert_Scale}
	TAG_OPEN
		'Scale' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = uncert_DistributionParamType
	TAG_OPEN2 'Scale' TAG_CLOSE))	
;

uncert_Location: {uncert_Location}
	TAG_OPEN
		'Location' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = uncert_DistributionParamType
	TAG_OPEN2 'Location' TAG_CLOSE))		
;

uncert_Uniform: {uncert_Uniform}
	TAG_OPEN
		'Uniform' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'Uniform' TAG_CLOSE))	
; 

//***************************************************************************************************
//***Math***
//***************************************************************************************************

Math_EquationType: {Math_EquationType}
	TAG_OPEN
		'Equation' 
   		xmlns += XS_xmlns*
   		writtenVersion = ct_writtenVersion 
    (TAG_CLOSE2 | (TAG_CLOSE 
		Expr = Math_EquationTypeContent
	TAG_OPEN2 'Equation' TAG_CLOSE))
;
Math_EquationTypeContent: {Math_EquationTypeContent}
	Scalar = Math_ScalarType | 
	Var = Math_VarType | 
	Binop = Math_BinopType | 
	Uniop = Math_UniopType | 
	Piecewise = Math_PiecewiseType
;

Math_ScalarType: {Math_ScalarType}
	TAG_OPEN
		'Scalar' 
		xmlns += XS_xmlns*		
		value = ct_Decimal_Value 
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'Scalar' TAG_CLOSE))
;

Math_VarType: {Math_VarType}
	TAG_OPEN
		'Var' 
		xmlns += XS_xmlns*
		block = Math_block? 
		symbId = Math_symbId 
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'Var' TAG_CLOSE))
;

Math_BinopType: {Math_BinopType}
	TAG_OPEN
		'Binop' 
		xmlns += XS_xmlns*
		'op' '=' op = Math_BinopName 
	(TAG_CLOSE2 | (TAG_CLOSE 
		LeftExpr = Math_ExprType 
		RightExpr = Math_ExprType
	TAG_OPEN2 'Binop' TAG_CLOSE))
; 

Math_UniopType: {Math_UniopType}
	TAG_OPEN
		'Uniop' 
		 xmlns += XS_xmlns*
		'op' '=' op = Math_UniopName 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = Math_ExprType 
	TAG_OPEN2 'Uniop' TAG_CLOSE))
; 

Math_ExprType: {Math_ExprType}
	Scalar = Math_ScalarType | 
	Var = Math_VarType | 
	Uniop = Math_UniopType | 
	Binop = Math_BinopType | 
	Constant = Math_ConstantType |
	FunctionCall = Math_FunctionCallType
;

Math_ConstantType: {Math_ConstantType}
	TAG_OPEN
		'Constant'
		 xmlns += XS_xmlns*
		'op' '=' op = Math_ConstantName
	(TAG_CLOSE2 |(TAG_CLOSE TAG_OPEN2 'Constant' TAG_CLOSE))
;

Math_FunctionCallType: {Math_FunctionCallType} 
	TAG_OPEN
		'FunctionCall' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Functionname = Math_VarType 
		FunctionArguments += Math_FunctionArgumentType* 
	TAG_OPEN2 'FunctionCall' TAG_CLOSE))
;

Math_FunctionArgumentType: 
	TAG_OPEN
		'FunctionArgument' 
		 xmlns += XS_xmlns*
		 symbId = Math_symbId 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = Math_FuncExprType 
	TAG_OPEN2 'FunctionArgument' TAG_CLOSE))
;

Math_FuncExprType: 
	Equation = Math_EquationType | 
	Scalar = Math_ScalarType |
	Constant = Math_ConstantType |
	Var = Math_VarType 
;

Math_PiecewiseType: {Math_PiecewiseType} 
	TAG_OPEN
		'Piecewise' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Piecewise += Math_PieceType*
	TAG_OPEN2 'Piecewise' TAG_CLOSE))
;

Math_PieceType: {Math_PieceType} 
	TAG_OPEN
		'Piece' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Content = Math_ExprType 
		Condition = Math_ConditionType
	TAG_OPEN2 'Piece' TAG_CLOSE))
;

Math_ConditionType: 
	TAG_OPEN
		'Condition' 
   		 xmlns += XS_xmlns*
   		 writtenVersion =  ct_writtenVersion 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = Math_LogicBaseType
	TAG_OPEN2 'Condition' TAG_CLOSE))
;

Math_LogicBaseType:
	LogicBinopType = Math_LogicBinopType | 
	LogicUniopType = Math_LogicUniopType | 
	True = Math_TRUE | 
	False = Math_FALSE |
	Otherwise = Math_Otherwise
;

Math_Otherwise: {Math_Otherwise}
		TAG_OPEN
		'Otherwise' 
   		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'Otherwise' TAG_CLOSE))
;

Math_LogicExprType:
	Math_LogicBaseType |
	Scalar = Math_ScalarType | 
	Constant = Math_ConstantType |
	Var = Math_VarType | 
	Uniop = Math_UniopType | 
	Binop = Math_BinopType | 
	FunctionCall = Math_FunctionCallType |
	String = Math_StringType	
;

Math_StringType:
	TAG_OPEN
		'String' 
   		xmlns += XS_xmlns*
   		value = ct_String_Value 
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'String' TAG_CLOSE))
;


Math_TRUE:
	true = ('"True"' | '"true"' | '"TRUE"')
;

Math_FALSE:
	false = ('"False"' | '"false"' | '"FALSE"')
;

Math_LogicBinopType:
	TAG_OPEN
	'LogicBinop' 
		 xmlns += XS_xmlns*
		'op' '=' op = Math_LogicBinopName 
	(TAG_CLOSE2 | (TAG_CLOSE 
		LeftExpr = Math_LogicExprType
		RightExpr = Math_LogicExprType
	TAG_OPEN2 'LogicBinop' TAG_CLOSE))	
;

Math_LogicUniopType:
	TAG_OPEN
		'LogicUniop' 
		xmlns += XS_xmlns*
		'op' '=' op = Math_LogicUniopName 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = Math_LogicExprType
	TAG_OPEN2 'LogicUniop' TAG_CLOSE))
;

//Add symbols
Math_BinopName: 
	binopname = '"plus"' |
	minus = '"minus"'    |
	times = '"times"'    |
	divide= '"divide"'   |
	power = '"power"'    |
	log   = '"log"'      |
	root  = '"root"'
;


Math_UniopName: 
	exp         =  '"exp"'         |
	ln          =  '"ln"'          |
	minus       =  '"minus"'       |
	factorial   =  '"factorial"'   |
	sin         =  '"sin"'         |
	cos         =  '"cos"'         |
	tan         =  '"tan"'         |
	sec         =  '"sec"'         |
	csc         =  '"csc"'         |
	cot         =  '"cot"'         |
	sinh        =  '"sinh"'        |
	csch        =  '"csch"'        |
	coth        =  '"coth"'        |
	arcsin      =  '"arcsin"'      |
	arccos      =  '"arccos"'      |
	arctan      =  '"arctan"'      |
	arcsec      =  '"arcsec"'      |
	arccsc      =  '"arccsc"'      |
	arccot      =  '"arccot"'      |
	arcsinh     =  '"arcsinh"'     |
	arccosh     =  '"arccosh"'     |
	arctanh     =  '"arctanh"'     |
	arcsech     =  '"arcsech"'     |
	arccsch     =  '"arccsch"'     |
	arccoth     =  '"arccoth"'     |
	floor       =  '"floor"'       |
	abs         =  '"abs"'         |
	ceiling     =  '"ceiling"'     |
	logit       =  '"logit"' 
;

Math_LogicUniopName :
	isDefined = '"isDefined"' | not = '"not"'
;

Math_LogicBinopName: 
	lt  =  '"lt"'   |
	leq =  '"leq"'  |
	gt  =  '"gt"'   |
	geq =  '"geq"'  |
	eq  =  '"eq"'   |
	neq =  '"neq"'  |
	and =  '"and"'  |
	or  =  '"or"'   |
	xor =  '"xor"'  
	
;

Math_ConstantName: 
	notanumber = '"notanumber"' | pi = '"pi"' | exponentiale = '"exponentiale"' | infinity = '"infinity"'
;

Math_symbId:
	'symbId' '=' symbId = Math_SymbolNameType
;

Math_id:
	'id' '=' id = Math_BlockNameType
;


Math_block:
	'block' '=' block = Math_BlockNameType
;


Math_SymbolNameType: XS_NAME
;

Math_EstimationOperationType:
	estPop = '"estPop"' | estFIM = '"estFIM"' | estIndiv = '"estIndiv"'	
;

Math_BlockNameType: XS_NAME;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//***CommonTypes***
/////////////////////////////////////////////////////////////////////////////////////////////////////////

ct_ReplicatesType:
	TAG_OPEN
		'Replicates' 
		xmlns += XS_xmlns*
		symbId = ct_symbId 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Expr = ct_Rhs?
	TAG_OPEN2 'Replicates' TAG_CLOSE))		
;
 
ct_AnnotationType: {ct_AnnotationType}
	TAG_OPEN 
		'Description' 
		xmlns += XS_xmlns*
	TAG_CLOSE 
		Description += word*
	TAG_OPEN2 'Description' TAG_CLOSE;
	
ct_Rhs:
	Equation = Math_EquationType | 
	Scalar = Math_ScalarType |
	Constant = Math_ConstantType |
	String  = Math_StringType | 
	Sequence = ct_SequenceType | 
	Vector = ct_VectorType | 
	FunctionCall = Math_FunctionCallType | 
	DataSet = ct_DataSetType |
	Var = Math_VarType |
	Distribution = uncert_DistributionType
; 

ct_DataSetType: {ct_DataSetType}
	TAG_OPEN
		'DataSet' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Definition = ct_DefinitionType 
		ExternalSource += ct_ExternalSourceType* 
		Row += ct_RowType* 
		InternalSource += ct_InternalSourceType*
	TAG_OPEN2 'DataSet' TAG_CLOSE));

ct_DefinitionType: {ct_DefinitionType}
	TAG_OPEN
		'Definition'
		xmlns += XS_xmlns* 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Definition += ct_ColumnType*
	TAG_OPEN2 'Definition' TAG_CLOSE))
;	

ct_DefinitionRhsType: {ct_DefinitionRhsType}
	TAG_OPEN
		'Definition'
		xmlns += XS_xmlns* 
	(TAG_CLOSE2 | (TAG_CLOSE 
		Definition = ct_Rhs?
	TAG_OPEN2 'Definition' TAG_CLOSE))
;
	
ct_ColumnType: 
	TAG_OPEN
		'Column' 
		xmlns += XS_xmlns*
		'columnNum' '=' columnNum = XS_INT 
		'columnVar' '=' columnVar = ct_SymbolNameType 
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'Column' TAG_CLOSE))
;

ct_ExternalSourceType: 
	TAG_OPEN
		'ExternalSource' 
		xmlns += XS_xmlns*
		(('format' '=' format = ct_SymbolNameType) &
		('headerLine' '=' headerLine = (Math_TRUE |Math_FALSE))? &
		('ignoreLineSymbol' '=' ignoreLineSymbol = ct_SymbolNameType)? &
		('url' '=' url = XS_ANY_URI)) 
	(TAG_CLOSE2 |(TAG_CLOSE TAG_OPEN2 'ExternalSource' TAG_CLOSE));

ct_RowType: {ct_RowType}
	TAG_OPEN
		'Row' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Row += ct_RowTypeContent*
	TAG_OPEN2 'Row' TAG_CLOSE));
	
ct_RowTypeContent:
	Cell = ct_CellType | 
	Null = ct_NullCellType
;

ct_NullCellType:
	TAG_OPEN
		null = 'Null' 
	TAG_CLOSE2
;

ct_CellType:
	TAG_OPEN
		'Cell'
		xmlns += XS_xmlns*
		value = ct_Decimal_Value 
	(TAG_CLOSE2 | (TAG_CLOSE 
	TAG_OPEN2 'Cell' TAG_CLOSE));


ct_InternalSourceType: 
	TAG_OPEN 
		'InternalSource' 
		xmlns += XS_xmlns*
		block = Math_block? 
		symbId = Math_symbId 
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'InternalSource' TAG_CLOSE))
;

ct_VectorType: {ct_VectorType}
	TAG_OPEN
		'Vector' 
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE 
		Scalar += Math_ScalarType? 
		Sequence += ct_SequenceType* 
	TAG_OPEN2 'Vector' TAG_CLOSE))
;

ct_SequenceType: 
	TAG_OPEN 
		'Sequence' 
		xmlns += XS_xmlns*
		'begin' '=' begin = XS_DECIMAL 
		('end' '=' end = XS_DECIMAL)?  
		'stepSize' '=' stepwise = XS_DECIMAL 
		('repetitions' '=' repetition = XS_INT)?    
	(TAG_CLOSE2 | (TAG_CLOSE TAG_OPEN2 'Sequence' TAG_CLOSE));
	

ct_VariableDefinitionType:
	TAG_OPEN
		'Variable'
		xmlns += XS_xmlns*
		((independentVar = ct_independentVar)? &
		(symbId = ct_symbId) &
		(symbolType = ct_symbolType)) 
	(TAG_CLOSE2 | (TAG_CLOSE
		Description = ct_AnnotationType? 
		Expr = ct_Rhs?
	TAG_OPEN2 'Variable' TAG_CLOSE))
;

ct_RestrictionType: {ct_RestrictionType}
	TAG_OPEN
		'Restriction'
		xmlns += XS_xmlns*
	(TAG_CLOSE2 | (TAG_CLOSE
		Expr = Math_ConditionType?
	TAG_OPEN2 'Restriction' TAG_CLOSE))
;	

ct_ScalarRhs:
	Equation = Math_EquationType | 
	Scalar = Math_ScalarType |
	Var = Math_VarType |
	String  = Math_StringType | 
	FunctionCall = Math_FunctionCallType 
;

ct_independentVar:
	'independentVar' '=' independentVar = ct_SymbolNameType
;

ct_levelId:
	'levelId' '=' levelId = ct_BlockNameType 
;

ct_name:
	'name' '=' name = XS_STRING
;

ct_symbId:
	('symbId' '=' symbId = ct_SymbolNameType) 
;

ct_id:
	('id' '=' id = ct_BlockNameType) 
;

ct_symbolType:
	('symbolType' '=' symbolType = ct_SymbolTypeType) 
;

ct_block:
	'block' '=' block = ct_BlockNameType
;

ct_writtenVersion:
	'writtenVersion' '=' writtenVersion = XS_STRING
;

ct_Decimal_Value:
	'value' '=' value = XS_DECIMAL 
;

ct_String_Value:
	'value' '=' value = XS_STRING 
;

ct_catId:
	'catId' '=' catId = ct_SymbolNameType 
;
 

ct_BlockNameType: XS_TOKEN;

ct_SymbolNameType: XS_STRING;

ct_SymbolTypeType:  
	scalar = '"scalar"' | 
	derivative = '"derivative"' | 
	distrib = '"distrib"' | 
	dataSet = '"dataSet"'  
;

//***************************************************************************************************
//***Terminals***/
//***************************************************************************************************

XS_xmlns: 
	('xmlns' | 'xsi') (':' (ID | 'xsi'))? '=' location = XS_STRING 
;

Namespace:
	ID':'
;

TAG_OPEN: '<'Namespace?;
TAG_CLOSE: '>';
TAG_CLOSE2: '/>';
TAG_OPEN2: '</'Namespace?;

XS_TOKEN: XS_STRING;
XS_ANY_URI: XS_STRING;
XS_NAME: XS_STRING;

XS_DECIMAL: XS_STRING;
XS_INT: XS_STRING;

word: ID | INT | DECIMAL;

terminal XS_STRING: '"' (ESCAPE_SEQUENCE | !('\\' | '"'))* '"';

terminal DECIMAL: ('0'..'9' + '.' '0'..'9'*)  | ('.' '0'..'9'+);

terminal fragment ESCAPE_SEQUENCE:
	'\\' ('b' | 't' | 'n' | 'f' | 'r' | '\"' | '\'' | '\\')
	| UNICODE_ESCAPE
	| OCTAL_ESCAPE;
	
terminal fragment OCTAL_ESCAPE:
	  '\\' ('0'..'3') ('0'..'7') ('0'..'7')
	| '\\' ('0'..'7') ('0'..'7')
	| '\\' ('0'..'7');

terminal fragment UNICODE_ESCAPE:
	'\\' 'u' HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT;

terminal fragment HEXDIGIT:
	('0'..'9' | 'a'..'f' | 'A'..'F');	
 
terminal ML_COMMENT: ('<!--') -> ('-->') ;
terminal XML_ANNOTATION: '<?xml' -> '?>';

